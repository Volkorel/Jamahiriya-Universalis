has_unmatching_administration_to_primary_culture = {
	OR = {
		AND = {
			culture = picard_culture
			NOT = { has_country_modifier = elven_administration }
		}
		AND = {
			culture = english
			NOT = { has_country_modifier = dwarven_administration }
		}
		AND = {
			culture_group = scandinavian
			NOT = { has_country_modifier = gnollish_administration }
		}
		AND = {
			culture = dutch
			NOT = { has_country_modifier = gnomish_administration }
		}
		AND = {
			OR = {
				culture_group = turko_semitic
				culture_group = maghrebi	
			}
			NOT = { has_country_modifier = goblin_administration }
		}
		AND = {
			culture = frisian
			NOT = { has_country_modifier = half_elven_administration }
		}
		AND = {
			culture = irish
			NOT = { has_country_modifier = half_orcish_administration }
		}
		AND = {
			culture_group = latin
			NOT = { has_country_modifier = halfling_administration }
		}
		AND = {
			culture_group = iberian
			NOT = { has_country_modifier = harpy_administration }
		}
		AND = {
			culture = basque
			NOT = { has_country_modifier = human_administration }
		}
		AND = {
			OR = {
				culture_group = central_american
				culture_group = aridoamerican
				culture_group = maya
				culture_group = otomanguean
				culture_group = andean_group
				culture_group = je_tupi
				culture_group = je
				culture_group = maranon
				culture_group = chibchan
				culture_group = mataco
				culture_group = araucanian
				culture_group = carribean
				culture_group = eskaleut
				culture_group = central_algonquian
				culture_group = plains_algonquian
				culture_group = eastern_algonquian
				culture_group = iroquoian
				culture_group = siouan
				culture_group = caddoan
				culture_group = muskogean
				culture_group = sonoran
				culture_group = apachean
				culture_group = na_dene
				culture_group = penutian
			}
			NOT = { has_country_modifier = kobold_administration }
		}
		AND = {
			OR = {
				culture_group = mande
				culture_group = sahelian
				culture_group = west_african
				culture_group = southern_african
				culture_group = kongo_group
				culture_group = great_lakes_group
				culture_group = african
				culture_group = cushitic
				culture_group = sudanese
				culture_group = khoisan_group
			}
			NOT = { has_country_modifier = orcish_administration }
		}
		AND = {
			culture_group = east_asian
			NOT = { has_country_modifier = ruinborn_administration }
		}
		AND = {
			OR = {
				culture_group = turkish_g
				culture_group = oghuz
				culture_group = altaic
			}
			NOT = { has_country_modifier = troll_administration }
		}
		AND = {
			culture_group = germanic
			NOT = { has_country_modifier = harimari_administration }
		}
		AND = {
			culture = armenian
			NOT = { has_country_modifier = hobgoblin_administration }
		}
		AND = {
			culture_group = east_slavic
			NOT = { has_country_modifier = centaur_administration }
		}
		AND = {
			OR = {
				culture_group = west_slavic
				culture_group = south_slavic
				culture_group = finno_ugric
			}
			NOT = { has_country_modifier = ogre_administration }
		}
	}
}
has_any_racial_administration = {
	OR = {
		has_country_modifier = orcish_administration
		has_country_modifier = human_administration
		has_country_modifier = elven_administration
		has_country_modifier = half_elven_administration
		has_country_modifier = half_orcish_administration
		has_country_modifier = troll_administration
		has_country_modifier = gnollish_administration
		has_country_modifier = goblin_administration
		has_country_modifier = gnomish_administration
		has_country_modifier = dwarven_administration
		has_country_modifier = kobold_administration
		has_country_modifier = ruinborn_administration
		has_country_modifier = harpy_administration
		has_country_modifier = halfling_administration
		has_country_modifier = ogre_administration
		has_country_modifier = centaur_administration
		has_country_modifier = harimari_administration
		has_country_modifier = hobgoblin_administration
	}
}
culture_is_troll = {
	OR = {
		culture_group = turkish_g
		culture_group = oghuz
		culture_group = altaic
	}
}

culture_is_ruinborn = {
	custom_trigger_tooltip = {
		tooltip = culture_is_ruinborn_tt
		culture_group = east_asian
	}
}

#Used for the tt
culture_is_not_ruinborn = {
	custom_trigger_tooltip = {
		tooltip = culture_is_not_ruinborn_tt
		NOT = { culture_is_ruinborn = yes }
	}
}

#NOTE: I have left most triggers stuff using the culture_group = race stuff to avoid creating a large number of conflicts, however these new triggers are the syntax used by the script for pop events
culture_is_centaur = {
	culture_group = east_slavic
}

culture_is_dwarven = {
	culture = english
}

culture_is_elven = {
	culture = picard_culture
}

culture_is_gnollish = {
	culture_group = scandinavian
}

culture_is_gnomish = {
	culture = dutch
}

culture_is_goblin = {
	OR = {
		culture_group = turko_semitic
		culture_group = maghrebi
	}
}

culture_is_halfling = {
	culture_group = latin
}

culture_is_half_elven = {
	culture = frisian
}

culture_is_half_orcish = {
	culture = irish
}

culture_is_harimari = {
	culture_group = germanic
}

culture_is_harpy = {
	culture_group = iberian
}

culture_is_human = {
	custom_trigger_tooltip = {
		tooltip = culture_is_human_tt
		culture = basque
	}
}

culture_is_hobgoblin = {
	culture = armenian
}

culture_is_kobold = {
	OR = {
		culture_group = central_american
		culture_group = aridoamerican
		culture_group = maya
		culture_group = otomanguean
		culture_group = andean_group
		culture_group = je_tupi
		culture_group = je
		culture_group = maranon
		culture_group = chibchan
		culture_group = mataco
		culture_group = araucanian
		culture_group = carribean
		culture_group = eskaleut
		culture_group = central_algonquian
		culture_group = plains_algonquian
		culture_group = eastern_algonquian
		culture_group = iroquoian
		culture_group = siouan
		culture_group = caddoan
		culture_group = muskogean
		culture_group = sonoran
		culture_group = apachean
		culture_group = na_dene
		culture_group = penutian
	}
}

culture_is_ogre = {
	OR = {
		culture_group = west_slavic
		culture_group = south_slavic
		culture_group = finno_ugric
	}
}

culture_is_orcish = {
	OR = {
		culture_group = mande
		culture_group = sahelian
		culture_group = west_african
		culture_group = southern_african
		culture_group = kongo_group
		culture_group = great_lakes_group
		culture_group = african
		culture_group = cushitic
		culture_group = sudanese
		culture_group = khoisan_group
	}
}
#Needs more accepted culture for new  races
has_human_accepted_culture = {
	accepted_culture = basque
}

has_elven_accepted_culture = {
	accepted_culture = picard_culture
}

has_dwarven_accepted_culture = {
	accepted_culture = english
}

has_halfling_accepted_culture = {
#culture_group = latin
}

has_gnomish_accepted_culture = {
	accepted_culture = dutch
}

has_half_elven_accepted_culture = {
	accepted_culture = frisian
}

has_half_orcish_accepted_culture = {
	accepted_culture = irish
}

has_orcish_accepted_culture = {
#culture_group = mande
#culture_group = sahelian
#culture_group = west_african
#culture_group = southern_african
#culture_group = kongo_group
#culture_group = great_lakes_group
#culture_group = african
#culture_group = cushitic
#culture_group = sudanese
#culture_group = khoisan_group
}

has_kobold_accepted_culture = {
#culture_group = central_american
#culture_group = aridoamerican
#culture_group = maya
#culture_group = otomanguean
#culture_group = andean_group
#culture_group = je_tupi
#culture_group = je
#culture_group = maranon
#culture_group = chibchan
#culture_group = mataco
#culture_group = araucanian
#culture_group = carribean
#culture_group = eskaleut
#culture_group = central_algonquian
#culture_group = plains_algonquian
#culture_group = eastern_algonquian
#culture_group = iroquoian
#culture_group = siouan
#culture_group = caddoan
#culture_group = muskogean
#culture_group = sonoran
#culture_group = apachean
#culture_group = na_dene
#culture_group = penutian
}

has_troll_accepted_culture = {
#culture_group = turkish_g
#culture_group = oghuz
#culture_group = altaic
}

has_harpy_accepted_culture = {
#culture_group = iberian
}

has_ruinborn_accepted_culture = {
#culture_group = east_asian
}

has_goblin_accepted_culture = {
#culture_group = turko_semitic
#culture_group = maghrebi
}

has_gnollish_accepted_culture = {
#culture_group = scandinavian
}

has_harimari_accepted_culture = {
#culture_group = germanic
}

has_hobgoblin_accepted_culture = {
	culture = armenian
}

has_centaur_accepted_culture = {
#culture_group = east_slavic
}

has_ogre_accepted_culture = {
#culture_group = west_slavic
#culture_group = south_slavic
#culture_group = finno_ugric
}

has_no_majority_trigger = {
	has_dwarven_majority_trigger = no
	has_elven_majority_trigger = no
	has_halfling_majority_trigger = no
	has_gnomish_majority_trigger = no
	has_half_orcish_majority_trigger = no
	has_kobold_majority_trigger = no
	has_orcish_majority_trigger = no
	has_human_majority_trigger = no
	has_gnollish_majority_trigger = no
	has_ruinborn_majority_trigger = no
	has_goblin_majority_trigger = no
	has_harpy_majority_trigger = no
	has_troll_majority_trigger = no
	has_half_elven_majority_trigger = no
	has_ogre_majority_trigger = no
	has_harimari_majority_trigger = no
	has_centaur_majority_trigger = no
	has_hobgoblin_majority_trigger = no
}

has_no_minority_trigger = {
	has_dwarven_minority_trigger = no
	has_elven_minority_trigger = no
	has_halfling_minority_trigger = no
	has_gnomish_minority_trigger = no
	has_half_orcish_minority_trigger = no
	has_kobold_minority_trigger = no
	has_orcish_minority_trigger = no
	has_human_minority_trigger = no
	has_gnollish_minority_trigger = no
	has_ruinborn_minority_trigger = no
	has_goblin_minority_trigger = no
	has_harpy_minority_trigger = no
	has_troll_minority_trigger = no
	has_half_elven_minority_trigger = no
	has_ogre_minority_trigger = no
	has_harimari_minority_trigger = no
	has_centaur_minority_trigger = no
	has_hobgoblin_minority_trigger = no
}

has_minority_trigger = {
	OR = {
		has_dwarven_minority_trigger = yes
		has_elven_minority_trigger = yes
		has_halfling_minority_trigger = yes
		has_gnomish_minority_trigger = yes
		has_half_orcish_minority_trigger = yes
		has_kobold_minority_trigger = yes
		has_orcish_minority_trigger = yes
		has_human_minority_trigger = yes
		has_gnollish_minority_trigger = yes
		has_ruinborn_minority_trigger = yes
		has_goblin_minority_trigger = yes
		has_harpy_minority_trigger = yes
		has_troll_minority_trigger = yes
		has_half_elven_minority_trigger = yes
		has_ogre_minority_trigger = yes
		has_harimari_minority_trigger = yes
		has_centaur_minority_trigger = yes
		has_hobgoblin_minority_trigger = yes
	}
}

has_any_oppressed_minority_trigger = {
	OR = {
		has_oppressed_dwarven_minority_trigger = yes
		has_oppressed_elven_minority_trigger = yes
		has_oppressed_halfling_minority_trigger = yes
		has_oppressed_gnomish_minority_trigger = yes
		has_oppressed_half_orcish_minority_trigger = yes
		has_oppressed_kobold_minority_trigger = yes
		has_oppressed_orcish_minority_trigger = yes
		has_oppressed_human_minority_trigger = yes
		has_oppressed_gnollish_minority_trigger = yes
		has_oppressed_ruinborn_minority_trigger = yes
		has_oppressed_goblin_minority_trigger = yes
		has_oppressed_harpy_minority_trigger = yes
		has_oppressed_troll_minority_trigger = yes
		has_oppressed_half_elven_minority_trigger = yes
		has_oppressed_ogre_minority_trigger = yes
		has_oppressed_harimari_minority_trigger = yes
		has_oppressed_centaur_minority_trigger = yes
		has_oppressed_hobgoblin_minority_trigger = yes
	}
}

has_any_coexisting_minority_trigger = {
	OR = {
		has_coexisting_dwarven_minority_trigger = yes
		has_coexisting_elven_minority_trigger = yes
		has_coexisting_halfling_minority_trigger = yes
		has_coexisting_gnomish_minority_trigger = yes
		has_coexisting_half_orcish_minority_trigger = yes
		has_coexisting_kobold_minority_trigger = yes
		has_coexisting_orcish_minority_trigger = yes
		has_coexisting_human_minority_trigger = yes
		has_coexisting_gnollish_minority_trigger = yes
		has_coexisting_ruinborn_minority_trigger = yes
		has_coexisting_goblin_minority_trigger = yes
		has_coexisting_harpy_minority_trigger = yes
		has_coexisting_troll_minority_trigger = yes
		has_coexisting_half_elven_minority_trigger = yes
		has_coexisting_ogre_minority_trigger = yes
		has_coexisting_harimari_minority_trigger = yes
		has_coexisting_centaur_minority_trigger = yes
		has_coexisting_hobgoblin_minority_trigger = yes
	}
}

has_any_integrated_minority_trigger = {
	OR = {
		has_integrated_dwarven_minority_trigger = yes
		has_integrated_elven_minority_trigger = yes
		has_integrated_halfling_minority_trigger = yes
		has_integrated_gnomish_minority_trigger = yes
		has_integrated_half_orcish_minority_trigger = yes
		has_integrated_kobold_minority_trigger = yes
		has_integrated_orcish_minority_trigger = yes
		has_integrated_human_minority_trigger = yes
		has_integrated_gnollish_minority_trigger = yes
		has_integrated_ruinborn_minority_trigger = yes
		has_integrated_goblin_minority_trigger = yes
		has_integrated_harpy_minority_trigger = yes
		has_integrated_troll_minority_trigger = yes
		has_integrated_half_elven_minority_trigger = yes
		has_integrated_ogre_minority_trigger = yes
		has_integrated_harimari_minority_trigger = yes
		has_integrated_centaur_minority_trigger = yes
		has_integrated_hobgoblin_minority_trigger = yes
	}
}

has_any_oppressed_pop_trigger = {
	OR = {
		has_oppressed_dwarven_pop_trigger = yes
		has_oppressed_elven_pop_trigger = yes
		has_oppressed_halfling_pop_trigger = yes
		has_oppressed_gnomish_pop_trigger = yes
		has_oppressed_half_orcish_pop_trigger = yes
		has_oppressed_kobold_pop_trigger = yes
		has_oppressed_orcish_pop_trigger = yes
		has_oppressed_human_pop_trigger = yes
		has_oppressed_gnollish_pop_trigger = yes
		has_oppressed_ruinborn_pop_trigger = yes
		has_oppressed_goblin_pop_trigger = yes
		has_oppressed_harpy_pop_trigger = yes
		has_oppressed_troll_pop_trigger = yes
		has_oppressed_half_elven_pop_trigger = yes
		has_oppressed_ogre_pop_trigger = yes
		has_oppressed_harimari_pop_trigger = yes
		has_oppressed_centaur_pop_trigger = yes
		has_oppressed_hobgoblin_pop_trigger = yes
	}
}

has_any_coexisting_pop_trigger = {
	OR = {
		has_coexisting_dwarven_pop_trigger = yes
		has_coexisting_elven_pop_trigger = yes
		has_coexisting_halfling_pop_trigger = yes
		has_coexisting_gnomish_pop_trigger = yes
		has_coexisting_half_orcish_pop_trigger = yes
		has_coexisting_kobold_pop_trigger = yes
		has_coexisting_orcish_pop_trigger = yes
		has_coexisting_human_pop_trigger = yes
		has_coexisting_gnollish_pop_trigger = yes
		has_coexisting_ruinborn_pop_trigger = yes
		has_coexisting_goblin_pop_trigger = yes
		has_coexisting_harpy_pop_trigger = yes
		has_coexisting_troll_pop_trigger = yes
		has_coexisting_half_elven_pop_trigger = yes
		has_coexisting_ogre_pop_trigger = yes
		has_coexisting_harimari_pop_trigger = yes
		has_coexisting_centaur_pop_trigger = yes
		has_coexisting_hobgoblin_pop_trigger = yes
	}
}

has_any_integrated_pop_trigger = {
	OR = {
		has_integrated_dwarven_pop_trigger = yes
		has_integrated_elven_pop_trigger = yes
		has_integrated_halfling_pop_trigger = yes
		has_integrated_gnomish_pop_trigger = yes
		has_integrated_half_orcish_pop_trigger = yes
		has_integrated_kobold_pop_trigger = yes
		has_integrated_orcish_pop_trigger = yes
		has_integrated_human_pop_trigger = yes
		has_integrated_gnollish_pop_trigger = yes
		has_integrated_ruinborn_pop_trigger = yes
		has_integrated_goblin_pop_trigger = yes
		has_integrated_harpy_pop_trigger = yes
		has_integrated_troll_pop_trigger = yes
		has_integrated_half_elven_pop_trigger = yes
		has_integrated_ogre_pop_trigger = yes
		has_integrated_harimari_pop_trigger = yes
		has_integrated_centaur_pop_trigger = yes
		has_integrated_hobgoblin_pop_trigger = yes
	}
}

has_low_tolerance_of_any_race_trigger = {
	OR = {
		low_tolerance_dwarven_race_trigger = yes
		low_tolerance_elven_race_trigger = yes
		low_tolerance_halfling_race_trigger = yes
		low_tolerance_gnomish_race_trigger = yes
		low_tolerance_half_orcish_race_trigger = yes
		low_tolerance_kobold_race_trigger = yes
		low_tolerance_orcish_race_trigger = yes
		low_tolerance_human_race_trigger = yes
		low_tolerance_gnollish_race_trigger = yes
		low_tolerance_ruinborn_race_trigger = yes
		low_tolerance_goblin_race_trigger = yes
		low_tolerance_harpy_race_trigger = yes
		low_tolerance_troll_race_trigger = yes
		low_tolerance_half_elven_race_trigger = yes
		low_tolerance_ogre_race_trigger = yes
		low_tolerance_harimari_race_trigger = yes
		low_tolerance_centaur_race_trigger = yes
		low_tolerance_hobgoblin_race_trigger = yes
	}
}

has_low_tolerance_of_any_race_trigger_jadd = { # Removing trolls so they're not required for the Jadd mission while still being so rare, will delete post-Sarhal
	OR = {
		low_tolerance_dwarven_race_trigger = yes
		low_tolerance_elven_race_trigger = yes
		low_tolerance_halfling_race_trigger = yes
		low_tolerance_gnomish_race_trigger = yes
		low_tolerance_half_orcish_race_trigger = yes
		low_tolerance_kobold_race_trigger = yes
		low_tolerance_orcish_race_trigger = yes
		low_tolerance_human_race_trigger = yes
		low_tolerance_gnollish_race_trigger = yes
		low_tolerance_ruinborn_race_trigger = yes
		low_tolerance_goblin_race_trigger = yes
		low_tolerance_harpy_race_trigger = yes
		# low_tolerance_troll_race_trigger = yes
		low_tolerance_half_elven_race_trigger = yes
		low_tolerance_ogre_race_trigger = yes
		low_tolerance_harimari_race_trigger = yes
		low_tolerance_centaur_race_trigger = yes
		low_tolerance_hobgoblin_race_trigger = yes
	}
}

has_high_tolerance_of_any_race_trigger = {
	OR = {
		high_tolerance_dwarven_race_trigger = yes
		high_tolerance_elven_race_trigger = yes
		high_tolerance_halfling_race_trigger = yes
		high_tolerance_gnomish_race_trigger = yes
		high_tolerance_half_orcish_race_trigger = yes
		high_tolerance_kobold_race_trigger = yes
		high_tolerance_orcish_race_trigger = yes
		high_tolerance_human_race_trigger = yes
		high_tolerance_gnollish_race_trigger = yes
		high_tolerance_ruinborn_race_trigger = yes
		high_tolerance_goblin_race_trigger = yes
		high_tolerance_harpy_race_trigger = yes
		high_tolerance_troll_race_trigger = yes
		high_tolerance_half_elven_race_trigger = yes
		high_tolerance_ogre_race_trigger = yes
		high_tolerance_harimari_race_trigger = yes
		high_tolerance_centaur_race_trigger = yes
		high_tolerance_hobgoblin_race_trigger = yes
	}
}

# ELVEN -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_elven_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_elven_minority_tooltip
		OR = {
			has_province_modifier = elven_minority_oppressed_small
			has_province_modifier = elven_minority_coexisting_small
			has_province_modifier = elven_minority_integrated_small
			has_province_modifier = elven_minority_oppressed_large
			has_province_modifier = elven_minority_coexisting_large
			has_province_modifier = elven_minority_integrated_large
		}
	}
}
has_elven_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_elven_majority_tooltip
		OR = {
			has_province_modifier = elven_majority_oppressed
			has_province_modifier = elven_majority_coexisting
			has_province_modifier = elven_majority_integrated
			has_province_modifier = elven_majority_primary
		}
	}
}
has_small_elven_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_elven_minority_tooltip
		OR = {
			has_province_modifier = elven_minority_oppressed_small
			has_province_modifier = elven_minority_coexisting_small
			has_province_modifier = elven_minority_integrated_small
		}
	}
}
has_large_elven_minority_trigger = {	# Only checks for large minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_elven_minority_tooltip
		OR = {
			has_province_modifier = elven_minority_oppressed_large
			has_province_modifier = elven_minority_coexisting_large
			has_province_modifier = elven_minority_integrated_large
		}
	}
}
has_oppressed_elven_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_elven_minority_tooltip
		OR = {
			has_province_modifier = elven_minority_oppressed_small
			has_province_modifier = elven_minority_oppressed_large
		}
	}
}
has_oppressed_elven_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_elven_pop_tooltip
		OR = {
			has_province_modifier = elven_minority_oppressed_small
			has_province_modifier = elven_minority_oppressed_large
			has_province_modifier = elven_majority_oppressed
		}
	}
}
has_integrated_elven_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_elven_minority_tooltip
		OR = {
			has_province_modifier = elven_minority_integrated_small
			has_province_modifier = elven_minority_integrated_large
		}
	}
}
has_integrated_elven_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_elven_pop_tooltip
		OR = {
			has_province_modifier = elven_minority_integrated_small
			has_province_modifier = elven_minority_integrated_large
			has_province_modifier = elven_majority_integrated
			has_province_modifier = elven_majority_primary
		}
	}
}
has_coexisting_elven_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_elven_minority_tooltip
		OR = {
			has_province_modifier = elven_minority_coexisting_small
			has_province_modifier = elven_minority_coexisting_large
		}
	}
}
has_coexisting_elven_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_elven_pop_tooltip
		OR = {
			has_province_modifier = elven_minority_coexisting_small
			has_province_modifier = elven_minority_coexisting_large
			has_province_modifier = elven_majority_coexisting
		}
	}
}
has_any_elven_pop_trigger = {	#Any pop minority or majority
	OR = {
		has_province_modifier = elven_minority_oppressed_small
		has_province_modifier = elven_minority_oppressed_large
		has_province_modifier = elven_majority_oppressed
		has_province_modifier = elven_minority_coexisting_small
		has_province_modifier = elven_minority_coexisting_large
		has_province_modifier = elven_majority_coexisting
		has_province_modifier = elven_minority_integrated_small
		has_province_modifier = elven_minority_integrated_large
		has_province_modifier = elven_majority_integrated
		has_province_modifier = elven_majority_primary
	}
}
# Country level
max_tolerance_elven_race_trigger = {	# Is elven tolerance = 100
	check_variable = {
		which = elven_race_tolerance
		which = 100
	}
}
high_tolerance_elven_race_trigger = {	# Is elven tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_elven_people_tooltip
		OR = {
			check_variable = {
				which = elven_race_tolerance
				value = 70
			}
			has_country_modifier = elven_administration
		}
	}
}
medium_tolerance_elven_race_trigger = {	# Is elven tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_elven_people_tooltip
		NOT = { has_country_modifier = elven_administration }
		check_variable = {
			which = elven_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = elven_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_elven_race_trigger = {	# Is elven tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_elven_people_tooltip
		NOT = { has_country_modifier = elven_administration }
		NOT = {
			check_variable = {
				which = elven_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_elven_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	#custom_trigger_tooltip = {
		#tooltip = have_unmatching_elven_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_elven_race_trigger = yes }
				NOT = { owner = { has_country_modifier = elven_administration } }
				OR = {
					has_coexisting_elven_pop_trigger = yes
					has_oppressed_elven_pop_trigger = yes
					has_province_modifier = elven_majority_primary
				}
			}
			AND = {
				owner = { high_tolerance_elven_race_trigger = yes }
				owner = { has_country_modifier = elven_administration }
				OR = {
					has_coexisting_elven_pop_trigger = yes
					has_oppressed_elven_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_elven_race_trigger = yes }
				OR = {
					has_integrated_elven_pop_trigger = yes
					has_oppressed_elven_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_elven_race_trigger = yes }
				OR = {
					has_integrated_elven_pop_trigger = yes
					has_coexisting_elven_pop_trigger = yes
				}
			}
		}
	#}
}
# For Ai Only
wants_to_increase_tolerance_elven = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = elven_race_tolerance
			which = elven_race_tolerance_ai
		}
	}
}
wants_to_maintain_tolerance_elven = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = elven_race_tolerance_ai
		which = elven_race_tolerance
	}
}
wants_to_decrease_tolerance_elven = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = elven_race_tolerance
		which = elven_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = elven_race_tolerance_ai
			which = elven_race_tolerance
		}
	}
}

# DWARVEN -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_dwarven_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_dwarven_minority_tooltip
		OR = {
			has_province_modifier = dwarven_minority_oppressed_small
			has_province_modifier = dwarven_minority_coexisting_small
			has_province_modifier = dwarven_minority_integrated_small
			has_province_modifier = dwarven_minority_oppressed_large
			has_province_modifier = dwarven_minority_coexisting_large
			has_province_modifier = dwarven_minority_integrated_large
		}
	}
}
has_dwarven_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_dwarven_majority_tooltip
		OR = {
			has_province_modifier = dwarven_majority_oppressed
			has_province_modifier = dwarven_majority_coexisting
			has_province_modifier = dwarven_majority_integrated
			has_province_modifier = dwarven_majority_primary
		}
	}
}
has_small_dwarven_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_dwarven_minority_tooltip
		OR = {
			has_province_modifier = dwarven_minority_oppressed_small
			has_province_modifier = dwarven_minority_coexisting_small
			has_province_modifier = dwarven_minority_integrated_small
		}
	}
}
has_large_dwarven_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_dwarven_minority_tooltip
		OR = {
			has_province_modifier = dwarven_minority_oppressed_large
			has_province_modifier = dwarven_minority_coexisting_large
			has_province_modifier = dwarven_minority_integrated_large
		}
	}
}
has_oppressed_dwarven_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_dwarven_minority_tooltip
		OR = {
			has_province_modifier = dwarven_minority_oppressed_small
			has_province_modifier = dwarven_minority_oppressed_large
		}
	}
}
has_oppressed_dwarven_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_dwarven_pop_tooltip
		OR = {
			has_province_modifier = dwarven_minority_oppressed_small
			has_province_modifier = dwarven_minority_oppressed_large
			has_province_modifier = dwarven_majority_oppressed
		}
	}
}
has_integrated_dwarven_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_dwarven_minority_tooltip
		OR = {
			has_province_modifier = dwarven_minority_integrated_small
			has_province_modifier = dwarven_minority_integrated_large
		}
	}
}
has_integrated_dwarven_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_dwarven_pop_tooltip
		OR = {
			has_province_modifier = dwarven_minority_integrated_small
			has_province_modifier = dwarven_minority_integrated_large
			has_province_modifier = dwarven_majority_integrated
			has_province_modifier = dwarven_majority_primary
		}
	}
}
has_coexisting_dwarven_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_dwarven_minority_tooltip
		OR = {
			has_province_modifier = dwarven_minority_coexisting_small
			has_province_modifier = dwarven_minority_coexisting_large
		}
	}
}
has_coexisting_dwarven_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_dwarven_pop_tooltip
		OR = {
			has_province_modifier = dwarven_minority_coexisting_small
			has_province_modifier = dwarven_minority_coexisting_large
			has_province_modifier = dwarven_majority_coexisting
		}
	}
}
has_any_dwarven_pop_trigger = {	#Any pop minority or majority
	OR = {
		has_province_modifier = dwarven_minority_oppressed_small
		has_province_modifier = dwarven_minority_oppressed_large
		has_province_modifier = dwarven_majority_oppressed
		has_province_modifier = dwarven_minority_coexisting_small
		has_province_modifier = dwarven_minority_coexisting_large
		has_province_modifier = dwarven_majority_coexisting
		has_province_modifier = dwarven_minority_integrated_small
		has_province_modifier = dwarven_minority_integrated_large
		has_province_modifier = dwarven_majority_integrated
		has_province_modifier = dwarven_majority_primary
	}
}
# Country level
max_tolerance_dwarven_race_trigger = {	# Is dwarven tolerance = 100
	check_variable = {
		which = dwarven_race_tolerance
		which = 100
	}
}
high_tolerance_dwarven_race_trigger = {	# Is dwarven tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_dwarven_people_tooltip
		OR = {
			check_variable = {
				which = dwarven_race_tolerance
				value = 71
			}
			has_country_modifier = dwarven_administration
		}
	}
}
medium_tolerance_dwarven_race_trigger = {	# Is dwarven tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_dwarven_people_tooltip
		NOT = { has_country_modifier = dwarven_administration }
		check_variable = {
			which = dwarven_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = dwarven_race_tolerance
				value = 71
			}
		}
	}
}
low_tolerance_dwarven_race_trigger = {	# Is dwarven tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_dwarven_people_tooltip
		NOT = { has_country_modifier = dwarven_administration }
		NOT = {
			check_variable = {
				which = dwarven_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_dwarven_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	#custom_trigger_tooltip = {
		#tooltip = have_unmatching_dwarven_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_dwarven_race_trigger = yes }
				NOT = { owner = { has_country_modifier = dwarven_administration } }
				OR = {
					has_coexisting_dwarven_pop_trigger = yes
					has_oppressed_dwarven_pop_trigger = yes
					has_province_modifier = dwarven_majority_primary
				}
			}
			AND = {
				owner = { high_tolerance_dwarven_race_trigger = yes }
				owner = { has_country_modifier = dwarven_administration }
				OR = {
					has_coexisting_dwarven_pop_trigger = yes
					has_oppressed_dwarven_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_dwarven_race_trigger = yes }
				OR = {
					has_integrated_dwarven_pop_trigger = yes
					has_oppressed_dwarven_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_dwarven_race_trigger = yes }
				OR = {
					has_integrated_dwarven_pop_trigger = yes
					has_coexisting_dwarven_pop_trigger = yes
				}
			}
		}
	#}
}
# For Ai Only
wants_to_increase_tolerance_dwarven = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = dwarven_race_tolerance
			which = dwarven_race_tolerance_ai
		}
	}
}
wants_to_maintain_tolerance_dwarven = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = dwarven_race_tolerance_ai
		which = dwarven_race_tolerance
	}
}
wants_to_decrease_tolerance_dwarven = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = dwarven_race_tolerance
		which = dwarven_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = dwarven_race_tolerance_ai
			which = dwarven_race_tolerance
		}
	}
}

# HALFLING -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_halfling_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_halfling_minority_tooltip
		OR = {
			has_province_modifier = halfling_minority_oppressed_small
			has_province_modifier = halfling_minority_coexisting_small
			has_province_modifier = halfling_minority_integrated_small
			has_province_modifier = halfling_minority_oppressed_large
			has_province_modifier = halfling_minority_coexisting_large
			has_province_modifier = halfling_minority_integrated_large
		}
	}
}
has_halfling_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_halfling_majority_tooltip
		OR = {
			has_province_modifier = halfling_majority_oppressed
			has_province_modifier = halfling_majority_coexisting
			has_province_modifier = halfling_majority_integrated
			has_province_modifier = halfling_majority_primary
		}
	}
}
has_small_halfling_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_halfling_minority_tooltip
		OR = {
			has_province_modifier = halfling_minority_oppressed_small
			has_province_modifier = halfling_minority_coexisting_small
			has_province_modifier = halfling_minority_integrated_small
		}
	}
}
has_large_halfling_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_halfling_minority_tooltip
		OR = {
			has_province_modifier = halfling_minority_oppressed_large
			has_province_modifier = halfling_minority_coexisting_large
			has_province_modifier = halfling_minority_integrated_large
		}
	}
}
has_oppressed_halfling_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_halfling_minority_tooltip
		OR = {
			has_province_modifier = halfling_minority_oppressed_small
			has_province_modifier = halfling_minority_oppressed_large
		}
	}
}
has_oppressed_halfling_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_halfling_pop_tooltip
		OR = {
			has_province_modifier = halfling_minority_oppressed_small
			has_province_modifier = halfling_minority_oppressed_large
			has_province_modifier = halfling_majority_oppressed
		}
	}
}
has_integrated_halfling_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_halfling_minority_tooltip
		OR = {
			has_province_modifier = halfling_minority_integrated_small
			has_province_modifier = halfling_minority_integrated_large
		}
	}
}
has_integrated_halfling_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_halfling_pop_tooltip
		OR = {
			has_province_modifier = halfling_minority_integrated_small
			has_province_modifier = halfling_minority_integrated_large
			has_province_modifier = halfling_majority_integrated
			has_province_modifier = halfling_majority_primary
		}
	}
}
has_coexisting_halfling_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_halfling_minority_tooltip
		OR = {
			has_province_modifier = halfling_minority_coexisting_small
			has_province_modifier = halfling_minority_coexisting_large
		}
	}
}
has_coexisting_halfling_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_halfling_pop_tooltip
		OR = {
			has_province_modifier = halfling_minority_coexisting_small
			has_province_modifier = halfling_minority_coexisting_large
			has_province_modifier = halfling_majority_coexisting
		}
	}
}
has_any_halfling_pop_trigger = {	#Any pop minority or majority
	OR = {
		has_province_modifier = halfling_minority_oppressed_small
		has_province_modifier = halfling_minority_oppressed_large
		has_province_modifier = halfling_majority_oppressed
		has_province_modifier = halfling_minority_coexisting_small
		has_province_modifier = halfling_minority_coexisting_large
		has_province_modifier = halfling_majority_coexisting
		has_province_modifier = halfling_minority_integrated_small
		has_province_modifier = halfling_minority_integrated_large
		has_province_modifier = halfling_majority_integrated
		has_province_modifier = halfling_majority_primary
	}
}
# Country level
max_tolerance_halfling_race_trigger = {	# Is halfling tolerance = 100
	check_variable = {
		which = halfling_race_tolerance
		which = 100
	}
}
high_tolerance_halfling_race_trigger = {	# Is halfling tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_halfling_people_tooltip
		OR = {
			check_variable = {
				which = halfling_race_tolerance
				value = 70
			}
			has_country_modifier = halfling_administration
		}
	}
}
medium_tolerance_halfling_race_trigger = {	# Is halfling tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_halfling_people_tooltip
		NOT = { has_country_modifier = halfling_administration }
		check_variable = {
			which = halfling_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = halfling_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_halfling_race_trigger = {	# Is halfling tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_halfling_people_tooltip
		NOT = { has_country_modifier = halfling_administration }
		NOT = {
			check_variable = {
				which = halfling_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_halfling_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	#custom_trigger_tooltip = {
		#tooltip = have_unmatching_halfling_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_halfling_race_trigger = yes }
				NOT = { owner = { has_country_modifier = halfling_administration } }
				OR = {
					has_coexisting_halfling_pop_trigger = yes
					has_oppressed_halfling_pop_trigger = yes
					has_province_modifier = halfling_majority_primary
				}
			}
			AND = {
				owner = { high_tolerance_halfling_race_trigger = yes }
				owner = { has_country_modifier = halfling_administration }
				OR = {
					has_coexisting_halfling_pop_trigger = yes
					has_oppressed_halfling_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_halfling_race_trigger = yes }
				OR = {
					has_integrated_halfling_pop_trigger = yes
					has_oppressed_halfling_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_halfling_race_trigger = yes }
				OR = {
					has_integrated_halfling_pop_trigger = yes
					has_coexisting_halfling_pop_trigger = yes
				}
			}
		}
	#}
}
# For Ai Only
wants_to_increase_tolerance_halfling = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = halfling_race_tolerance
			which = halfling_race_tolerance_ai
		}
	}
}
wants_to_maintain_tolerance_halfling = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = halfling_race_tolerance_ai
		which = halfling_race_tolerance
	}
}
wants_to_decrease_tolerance_halfling = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = halfling_race_tolerance
		which = halfling_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = halfling_race_tolerance_ai
			which = halfling_race_tolerance
		}
	}
}

# GNOMISH -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_gnomish_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_gnomish_minority_tooltip
		OR = {
			has_province_modifier = gnomish_minority_oppressed_small
			has_province_modifier = gnomish_minority_coexisting_small
			has_province_modifier = gnomish_minority_integrated_small
			has_province_modifier = gnomish_minority_oppressed_large
			has_province_modifier = gnomish_minority_coexisting_large
			has_province_modifier = gnomish_minority_integrated_large
		}
	}
}
has_gnomish_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_gnomish_majority_tooltip
		OR = {
			has_province_modifier = gnomish_majority_oppressed
			has_province_modifier = gnomish_majority_coexisting
			has_province_modifier = gnomish_majority_integrated
			has_province_modifier = gnomish_majority_primary
		}
	}
}
has_small_gnomish_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_gnomish_minority_tooltip
		OR = {
			has_province_modifier = gnomish_minority_oppressed_small
			has_province_modifier = gnomish_minority_coexisting_small
			has_province_modifier = gnomish_minority_integrated_small
		}
	}
}
has_large_gnomish_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_gnomish_minority_tooltip
		OR = {
			has_province_modifier = gnomish_minority_oppressed_large
			has_province_modifier = gnomish_minority_coexisting_large
			has_province_modifier = gnomish_minority_integrated_large
		}
	}
}
has_oppressed_gnomish_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_gnomish_minority_tooltip
		OR = {
			has_province_modifier = gnomish_minority_oppressed_small
			has_province_modifier = gnomish_minority_oppressed_large
		}
	}
}
has_oppressed_gnomish_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_gnomish_pop_tooltip
		OR = {
			has_province_modifier = gnomish_minority_oppressed_small
			has_province_modifier = gnomish_minority_oppressed_large
			has_province_modifier = gnomish_majority_oppressed
		}
	}
}
has_integrated_gnomish_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_gnomish_minority_tooltip
		OR = {
			has_province_modifier = gnomish_minority_integrated_small
			has_province_modifier = gnomish_minority_integrated_large
		}
	}
}
has_integrated_gnomish_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_gnomish_pop_tooltip
		OR = {
			has_province_modifier = gnomish_minority_integrated_small
			has_province_modifier = gnomish_minority_integrated_large
			has_province_modifier = gnomish_majority_integrated
			has_province_modifier = gnomish_majority_primary
		}
	}
}
has_coexisting_gnomish_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_gnomish_minority_tooltip
		OR = {
			has_province_modifier = gnomish_minority_coexisting_small
			has_province_modifier = gnomish_minority_coexisting_large
		}
	}
}
has_coexisting_gnomish_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_gnomish_pop_tooltip
		OR = {
			has_province_modifier = gnomish_minority_coexisting_small
			has_province_modifier = gnomish_minority_coexisting_large
			has_province_modifier = gnomish_majority_coexisting
		}
	}
}
has_any_gnomish_pop_trigger = {	#Any pop minority or majority
	OR = {
		has_province_modifier = gnomish_minority_oppressed_small
		has_province_modifier = gnomish_minority_oppressed_large
		has_province_modifier = gnomish_majority_oppressed
		has_province_modifier = gnomish_minority_coexisting_small
		has_province_modifier = gnomish_minority_coexisting_large
		has_province_modifier = gnomish_majority_coexisting
		has_province_modifier = gnomish_minority_integrated_small
		has_province_modifier = gnomish_minority_integrated_large
		has_province_modifier = gnomish_majority_integrated
		has_province_modifier = gnomish_majority_primary
	}
}
# Country level
max_tolerance_gnomish_race_trigger = {	# Is gnomish tolerance = 100
	check_variable = {
		which = gnomish_race_tolerance
		which = 100
	}
}
high_tolerance_gnomish_race_trigger = {	# Is gnomish tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_gnomish_people_tooltip
		OR = {
			check_variable = {
				which = gnomish_race_tolerance
				value = 70
			}
			has_country_modifier = gnomish_administration
		}
	}
}
medium_tolerance_gnomish_race_trigger = {	# Is gnomish tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_gnomish_people_tooltip
		NOT = { has_country_modifier = gnomish_administration }
		check_variable = {
			which = gnomish_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = gnomish_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_gnomish_race_trigger = {	# Is gnomish tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_gnomish_people_tooltip
		NOT = { has_country_modifier = gnomish_administration }
		NOT = {
			check_variable = {
				which = gnomish_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_gnomish_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	#custom_trigger_tooltip = {
		#tooltip = have_unmatching_gnomish_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_gnomish_race_trigger = yes }
				NOT = { owner = { has_country_modifier = gnomish_administration } }
				OR = {
					has_coexisting_gnomish_pop_trigger = yes
					has_oppressed_gnomish_pop_trigger = yes
					has_province_modifier = gnomish_majority_primary
				}
			}
			AND = {
				owner = { high_tolerance_gnomish_race_trigger = yes }
				owner = { has_country_modifier = gnomish_administration }
				OR = {
					has_coexisting_gnomish_pop_trigger = yes
					has_oppressed_gnomish_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_gnomish_race_trigger = yes }
				OR = {
					has_integrated_gnomish_pop_trigger = yes
					has_oppressed_gnomish_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_gnomish_race_trigger = yes }
				OR = {
					has_integrated_gnomish_pop_trigger = yes
					has_coexisting_gnomish_pop_trigger = yes
				}
			}
		}
	#}
}
# For Ai Only
wants_to_increase_tolerance_gnomish = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = gnomish_race_tolerance
			which = gnomish_race_tolerance_ai
		}
	}
}
wants_to_maintain_tolerance_gnomish = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = gnomish_race_tolerance_ai
		which = gnomish_race_tolerance
	}
}
wants_to_decrease_tolerance_gnomish = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = gnomish_race_tolerance
		which = gnomish_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = gnomish_race_tolerance_ai
			which = gnomish_race_tolerance
		}
	}
}

# HALF ORCISH -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_half_orcish_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_half_orcish_minority_tooltip
		OR = {
			has_province_modifier = half_orcish_minority_oppressed_small
			has_province_modifier = half_orcish_minority_coexisting_small
			has_province_modifier = half_orcish_minority_integrated_small
			has_province_modifier = half_orcish_minority_oppressed_large
			has_province_modifier = half_orcish_minority_coexisting_large
			has_province_modifier = half_orcish_minority_integrated_large
		}
	}
}
has_half_orcish_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_half_orcish_majority_tooltip
		OR = {
			has_province_modifier = half_orcish_majority_oppressed
			has_province_modifier = half_orcish_majority_coexisting
			has_province_modifier = half_orcish_majority_integrated
			has_province_modifier = half_orcish_majority_primary
		}
	}
}
has_small_half_orcish_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_half_orcish_minority_tooltip
		OR = {
			has_province_modifier = half_orcish_minority_oppressed_small
			has_province_modifier = half_orcish_minority_coexisting_small
			has_province_modifier = half_orcish_minority_integrated_small
		}
	}
}
has_large_half_orcish_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_half_orcish_minority_tooltip
		OR = {
			has_province_modifier = half_orcish_minority_oppressed_large
			has_province_modifier = half_orcish_minority_coexisting_large
			has_province_modifier = half_orcish_minority_integrated_large
		}
	}
}
has_oppressed_half_orcish_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_half_orcish_minority_tooltip
		OR = {
			has_province_modifier = half_orcish_minority_oppressed_small
			has_province_modifier = half_orcish_minority_oppressed_large
		}
	}
}
has_oppressed_half_orcish_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_half_orcish_pop_tooltip
		OR = {
			has_province_modifier = half_orcish_minority_oppressed_small
			has_province_modifier = half_orcish_minority_oppressed_large
			has_province_modifier = half_orcish_majority_oppressed
		}
	}
}
has_integrated_half_orcish_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_half_orcish_minority_tooltip
		OR = {
			has_province_modifier = half_orcish_minority_integrated_small
			has_province_modifier = half_orcish_minority_integrated_large
		}
	}
}
has_integrated_half_orcish_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_half_orcish_pop_tooltip
		OR = {
			has_province_modifier = half_orcish_minority_integrated_small
			has_province_modifier = half_orcish_minority_integrated_large
			has_province_modifier = half_orcish_majority_integrated
			has_province_modifier = half_orcish_majority_primary
		}
	}
}
has_coexisting_half_orcish_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_half_orcish_minority_tooltip
		OR = {
			has_province_modifier = half_orcish_minority_coexisting_small
			has_province_modifier = half_orcish_minority_coexisting_large
		}
	}
}
has_coexisting_half_orcish_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_half_orcish_pop_tooltip
		OR = {
			has_province_modifier = half_orcish_minority_coexisting_small
			has_province_modifier = half_orcish_minority_coexisting_large
			has_province_modifier = half_orcish_majority_coexisting
		}
	}
}
has_any_half_orcish_pop_trigger = {	#Any pop minority or majority
	OR = {
		has_province_modifier = half_orcish_minority_oppressed_small
		has_province_modifier = half_orcish_minority_oppressed_large
		has_province_modifier = half_orcish_majority_oppressed
		has_province_modifier = half_orcish_minority_coexisting_small
		has_province_modifier = half_orcish_minority_coexisting_large
		has_province_modifier = half_orcish_majority_coexisting
		has_province_modifier = half_orcish_minority_integrated_small
		has_province_modifier = half_orcish_minority_integrated_large
		has_province_modifier = half_orcish_majority_integrated
		has_province_modifier = half_orcish_majority_primary
	}
}
# Country level
max_tolerance_half_orcish_race_trigger = {	# Is half_orcish tolerance = 100
	check_variable = {
		which = half_orcish_race_tolerance
		which = 100
	}
}
high_tolerance_half_orcish_race_trigger = {	# Is half_orcish tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_half_orcish_people_tooltip
		OR = {
			check_variable = {
				which = half_orcish_race_tolerance
				value = 70
			}
			has_country_modifier = half_orcish_administration
		}
	}
}
medium_tolerance_half_orcish_race_trigger = {	# Is half_orcish tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_half_orcish_people_tooltip
		NOT = { has_country_modifier = half_orcish_administration }
		check_variable = {
			which = half_orcish_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = half_orcish_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_half_orcish_race_trigger = {	# Is half_orcish tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_half_orcish_people_tooltip
		NOT = { has_country_modifier = half_orcish_administration }
		NOT = {
			check_variable = {
				which = half_orcish_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_half_orcish_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	#custom_trigger_tooltip = {
		#tooltip = have_unmatching_half_orcish_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_half_orcish_race_trigger = yes }
				NOT = { owner = { has_country_modifier = half_orcish_administration } }
				OR = {
					has_coexisting_half_orcish_pop_trigger = yes
					has_oppressed_half_orcish_pop_trigger = yes
					has_province_modifier = half_orcish_majority_primary
				}
			}
			AND = {
				owner = { high_tolerance_half_orcish_race_trigger = yes }
				owner = { has_country_modifier = half_orcish_administration }
				OR = {
					has_coexisting_half_orcish_pop_trigger = yes
					has_oppressed_half_orcish_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_half_orcish_race_trigger = yes }
				OR = {
					has_integrated_half_orcish_pop_trigger = yes
					has_oppressed_half_orcish_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_half_orcish_race_trigger = yes }
				OR = {
					has_integrated_half_orcish_pop_trigger = yes
					has_coexisting_half_orcish_pop_trigger = yes
				}
			}
		}
	#}
}
# For Ai Only
wants_to_increase_tolerance_half_orcish = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = half_orcish_race_tolerance
			which = half_orcish_race_tolerance_ai
		}
	}
}
wants_to_maintain_tolerance_half_orcish = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = half_orcish_race_tolerance_ai
		which = half_orcish_race_tolerance
	}
}
wants_to_decrease_tolerance_half_orcish = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = half_orcish_race_tolerance
		which = half_orcish_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = half_orcish_race_tolerance_ai
			which = half_orcish_race_tolerance
		}
	}
}

# KOBOLD -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_kobold_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_kobold_minority_tooltip
		OR = {
			has_province_modifier = kobold_minority_oppressed_small
			has_province_modifier = kobold_minority_coexisting_small
			has_province_modifier = kobold_minority_integrated_small
			has_province_modifier = kobold_minority_oppressed_large
			has_province_modifier = kobold_minority_coexisting_large
			has_province_modifier = kobold_minority_integrated_large
		}
	}
}
has_kobold_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_kobold_majority_tooltip
		OR = {
			has_province_modifier = kobold_majority_oppressed
			has_province_modifier = kobold_majority_coexisting
			has_province_modifier = kobold_majority_integrated
			has_province_modifier = kobold_majority_primary
		}
	}
}
has_small_kobold_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_kobold_minority_tooltip
		OR = {
			has_province_modifier = kobold_minority_oppressed_small
			has_province_modifier = kobold_minority_coexisting_small
			has_province_modifier = kobold_minority_integrated_small
		}
	}
}
has_large_kobold_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_kobold_minority_tooltip
		OR = {
			has_province_modifier = kobold_minority_oppressed_large
			has_province_modifier = kobold_minority_coexisting_large
			has_province_modifier = kobold_minority_integrated_large
		}
	}
}
has_oppressed_kobold_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_kobold_minority_tooltip
		OR = {
			has_province_modifier = kobold_minority_oppressed_small
			has_province_modifier = kobold_minority_oppressed_large
		}
	}
}
has_oppressed_kobold_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_kobold_pop_tooltip
		OR = {
			has_province_modifier = kobold_minority_oppressed_small
			has_province_modifier = kobold_minority_oppressed_large
			has_province_modifier = kobold_majority_oppressed
		}
	}
}
has_integrated_kobold_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_kobold_minority_tooltip
		OR = {
			has_province_modifier = kobold_minority_integrated_small
			has_province_modifier = kobold_minority_integrated_large
		}
	}
}
has_integrated_kobold_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_kobold_pop_tooltip
		OR = {
			has_province_modifier = kobold_minority_integrated_small
			has_province_modifier = kobold_minority_integrated_large
			has_province_modifier = kobold_majority_integrated
			has_province_modifier = kobold_majority_primary
		}
	}
}
has_coexisting_kobold_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_kobold_minority_tooltip
		OR = {
			has_province_modifier = kobold_minority_coexisting_small
			has_province_modifier = kobold_minority_coexisting_large
		}
	}
}
has_coexisting_kobold_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_kobold_pop_tooltip
		OR = {
			has_province_modifier = kobold_minority_coexisting_small
			has_province_modifier = kobold_minority_coexisting_large
			has_province_modifier = kobold_majority_coexisting
		}
	}
}
has_any_kobold_pop_trigger = {	#Any pop minority or majority
	OR = {
		has_province_modifier = kobold_minority_oppressed_small
		has_province_modifier = kobold_minority_oppressed_large
		has_province_modifier = kobold_majority_oppressed
		has_province_modifier = kobold_minority_coexisting_small
		has_province_modifier = kobold_minority_coexisting_large
		has_province_modifier = kobold_majority_coexisting
		has_province_modifier = kobold_minority_integrated_small
		has_province_modifier = kobold_minority_integrated_large
		has_province_modifier = kobold_majority_integrated
		has_province_modifier = kobold_majority_primary
	}
}
# Country level
max_tolerance_kobold_race_trigger = {	# Is kobold tolerance = 100
	check_variable = {
		which = kobold_race_tolerance
		which = 100
	}
}
high_tolerance_kobold_race_trigger = {	# Is kobold tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_kobold_people_tooltip
		OR = {
			check_variable = {
				which = kobold_race_tolerance
				value = 70
			}
			has_country_modifier = kobold_administration
		}
	}
}
medium_tolerance_kobold_race_trigger = {	# Is kobold tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_kobold_people_tooltip
		NOT = { has_country_modifier = kobold_administration }
		check_variable = {
			which = kobold_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = kobold_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_kobold_race_trigger = {	# Is kobold tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_kobold_people_tooltip
		NOT = { has_country_modifier = kobold_administration }
		NOT = {
			check_variable = {
				which = kobold_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_kobold_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	#custom_trigger_tooltip = {
		#tooltip = have_unmatching_kobold_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_kobold_race_trigger = yes }
				NOT = { owner = { has_country_modifier = kobold_administration } }
				OR = {
					has_coexisting_kobold_pop_trigger = yes
					has_oppressed_kobold_pop_trigger = yes
					has_province_modifier = kobold_majority_primary
				}
			}
			AND = {
				owner = { high_tolerance_kobold_race_trigger = yes }
				owner = { has_country_modifier = kobold_administration }
				OR = {
					has_coexisting_kobold_pop_trigger = yes
					has_oppressed_kobold_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_kobold_race_trigger = yes }
				OR = {
					has_integrated_kobold_pop_trigger = yes
					has_oppressed_kobold_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_kobold_race_trigger = yes }
				OR = {
					has_integrated_kobold_pop_trigger = yes
					has_coexisting_kobold_pop_trigger = yes
				}
			}
		}
	#}
}
# For Ai Only
wants_to_increase_tolerance_kobold = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = kobold_race_tolerance
			which = kobold_race_tolerance_ai
		}
	}
}
wants_to_maintain_tolerance_kobold = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = kobold_race_tolerance_ai
		which = kobold_race_tolerance
	}
}
wants_to_decrease_tolerance_kobold = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = kobold_race_tolerance
		which = kobold_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = kobold_race_tolerance_ai
			which = kobold_race_tolerance
		}
	}
}

# HUMAN -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_human_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_human_minority_tooltip
		OR = {
			has_province_modifier = human_minority_oppressed_small
			has_province_modifier = human_minority_coexisting_small
			has_province_modifier = human_minority_integrated_small
			has_province_modifier = human_minority_oppressed_large
			has_province_modifier = human_minority_coexisting_large
			has_province_modifier = human_minority_integrated_large
		}
	}
}
has_human_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_human_majority_tooltip
		OR = {
			has_province_modifier = human_majority_oppressed
			has_province_modifier = human_majority_coexisting
			has_province_modifier = human_majority_integrated
			has_province_modifier = human_majority_primary
		}
	}
}
has_small_human_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_human_minority_tooltip
		OR = {
			has_province_modifier = human_minority_oppressed_small
			has_province_modifier = human_minority_coexisting_small
			has_province_modifier = human_minority_integrated_small
		}
	}
}
has_large_human_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_human_minority_tooltip
		OR = {
			has_province_modifier = human_minority_oppressed_large
			has_province_modifier = human_minority_coexisting_large
			has_province_modifier = human_minority_integrated_large
		}
	}
}
has_oppressed_human_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_human_minority_tooltip
		OR = {
			has_province_modifier = human_minority_oppressed_small
			has_province_modifier = human_minority_oppressed_large
		}
	}
}
has_oppressed_human_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_human_pop_tooltip
		OR = {
			has_province_modifier = human_minority_oppressed_small
			has_province_modifier = human_minority_oppressed_large
			has_province_modifier = human_majority_oppressed
		}
	}
}
has_integrated_human_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_human_minority_tooltip
		OR = {
			has_province_modifier = human_minority_integrated_small
			has_province_modifier = human_minority_integrated_large
		}
	}
}
has_integrated_human_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_human_pop_tooltip
		OR = {
			has_province_modifier = human_minority_integrated_small
			has_province_modifier = human_minority_integrated_large
			has_province_modifier = human_majority_integrated
			has_province_modifier = human_majority_primary
		}
	}
}
has_coexisting_human_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_human_minority_tooltip
		OR = {
			has_province_modifier = human_minority_coexisting_small
			has_province_modifier = human_minority_coexisting_large
		}
	}
}
has_coexisting_human_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_human_pop_tooltip
		OR = {
			has_province_modifier = human_minority_coexisting_small
			has_province_modifier = human_minority_coexisting_large
			has_province_modifier = human_majority_coexisting
		}
	}
}
has_any_human_pop_trigger = {	#Any pop minority or majority
	OR = {
		has_province_modifier = human_minority_oppressed_small
		has_province_modifier = human_minority_oppressed_large
		has_province_modifier = human_majority_oppressed
		has_province_modifier = human_minority_coexisting_small
		has_province_modifier = human_minority_coexisting_large
		has_province_modifier = human_majority_coexisting
		has_province_modifier = human_minority_integrated_small
		has_province_modifier = human_minority_integrated_large
		has_province_modifier = human_majority_integrated
		has_province_modifier = human_majority_primary
	}
}
# Country level
max_tolerance_human_race_trigger = {	# Is human tolerance = 100
	check_variable = {
		which = human_race_tolerance
		which = 100
	}
}
high_tolerance_human_race_trigger = {	# Is human tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_human_people_tooltip
		OR = {
			check_variable = {
				which = human_race_tolerance
				value = 70
			}
			has_country_modifier = human_administration
		}
	}
}
medium_tolerance_human_race_trigger = {	# Is human tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_human_people_tooltip
		NOT = { has_country_modifier = human_administration }
		check_variable = {
			which = human_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = human_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_human_race_trigger = {	# Is human tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_human_people_tooltip
		NOT = { has_country_modifier = human_administration }
		NOT = {
			check_variable = {
				which = human_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_human_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	#custom_trigger_tooltip = {
		#tooltip = have_unmatching_human_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_human_race_trigger = yes }
				NOT = { owner = { has_country_modifier = human_administration } }
				OR = {
					has_coexisting_human_pop_trigger = yes
					has_oppressed_human_pop_trigger = yes
					has_province_modifier = human_majority_primary
				}
			}
			AND = {
				owner = { high_tolerance_human_race_trigger = yes }
				owner = { has_country_modifier = human_administration }
				OR = {
					has_coexisting_human_pop_trigger = yes
					has_oppressed_human_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_human_race_trigger = yes }
				OR = {
					has_integrated_human_pop_trigger = yes
					has_oppressed_human_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_human_race_trigger = yes }
				OR = {
					has_integrated_human_pop_trigger = yes
					has_coexisting_human_pop_trigger = yes
				}
			}
		}
	#}
}
# For Ai Only
wants_to_increase_tolerance_human = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = human_race_tolerance
			which = human_race_tolerance_ai
		}
	}
}
wants_to_maintain_tolerance_human = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = human_race_tolerance_ai
		which = human_race_tolerance
	}
}
wants_to_decrease_tolerance_human = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = human_race_tolerance
		which = human_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = human_race_tolerance_ai
			which = human_race_tolerance
		}
	}
}

# GNOLLISH -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_gnollish_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_gnollish_minority_tooltip
		OR = {
			has_province_modifier = gnollish_minority_oppressed_small
			has_province_modifier = gnollish_minority_coexisting_small
			has_province_modifier = gnollish_minority_integrated_small
			has_province_modifier = gnollish_minority_oppressed_large
			has_province_modifier = gnollish_minority_coexisting_large
			has_province_modifier = gnollish_minority_integrated_large
		}
	}
}
has_gnollish_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_gnollish_majority_tooltip
		OR = {
			has_province_modifier = gnollish_majority_oppressed
			has_province_modifier = gnollish_majority_coexisting
			has_province_modifier = gnollish_majority_integrated
			has_province_modifier = gnollish_majority_primary
		}
	}
}
has_small_gnollish_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_gnollish_minority_tooltip
		OR = {
			has_province_modifier = gnollish_minority_oppressed_small
			has_province_modifier = gnollish_minority_coexisting_small
			has_province_modifier = gnollish_minority_integrated_small
		}
	}
}
has_large_gnollish_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_gnollish_minority_tooltip
		OR = {
			has_province_modifier = gnollish_minority_oppressed_large
			has_province_modifier = gnollish_minority_coexisting_large
			has_province_modifier = gnollish_minority_integrated_large
		}
	}
}
has_oppressed_gnollish_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_gnollish_minority_tooltip
		OR = {
			has_province_modifier = gnollish_minority_oppressed_small
			has_province_modifier = gnollish_minority_oppressed_large
		}
	}
}
has_oppressed_gnollish_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_gnollish_pop_tooltip
		OR = {
			has_province_modifier = gnollish_minority_oppressed_small
			has_province_modifier = gnollish_minority_oppressed_large
			has_province_modifier = gnollish_majority_oppressed
		}
	}
}
has_integrated_gnollish_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_gnollish_minority_tooltip
		OR = {
			has_province_modifier = gnollish_minority_integrated_small
			has_province_modifier = gnollish_minority_integrated_large
		}
	}
}
has_integrated_gnollish_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_gnollish_pop_tooltip
		OR = {
			has_province_modifier = gnollish_minority_integrated_small
			has_province_modifier = gnollish_minority_integrated_large
			has_province_modifier = gnollish_majority_integrated
			has_province_modifier = gnollish_majority_primary
		}
	}
}
has_coexisting_gnollish_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_gnollish_minority_tooltip
		OR = {
			has_province_modifier = gnollish_minority_coexisting_small
			has_province_modifier = gnollish_minority_coexisting_large
		}
	}
}
has_coexisting_gnollish_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_gnollish_pop_tooltip
		OR = {
			has_province_modifier = gnollish_minority_coexisting_small
			has_province_modifier = gnollish_minority_coexisting_large
			has_province_modifier = gnollish_majority_coexisting
		}
	}
}
has_any_gnollish_pop_trigger = {	#Any pop minority or majority
	OR = {
		has_province_modifier = gnollish_minority_oppressed_small
		has_province_modifier = gnollish_minority_oppressed_large
		has_province_modifier = gnollish_majority_oppressed
		has_province_modifier = gnollish_minority_coexisting_small
		has_province_modifier = gnollish_minority_coexisting_large
		has_province_modifier = gnollish_majority_coexisting
		has_province_modifier = gnollish_minority_integrated_small
		has_province_modifier = gnollish_minority_integrated_large
		has_province_modifier = gnollish_majority_integrated
		has_province_modifier = gnollish_majority_primary
	}
}
# Country level
max_tolerance_gnollish_race_trigger = {	# Is gnollish tolerance = 100
	check_variable = {
		which = gnollish_race_tolerance
		which = 100
	}
}
high_tolerance_gnollish_race_trigger = {	# Is gnollish tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_gnollish_people_tooltip
		OR = {
			check_variable = {
				which = gnollish_race_tolerance
				value = 70
			}
			has_country_modifier = gnollish_administration
		}
	}
}
medium_tolerance_gnollish_race_trigger = {	# Is gnollish tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_gnollish_people_tooltip
		NOT = { has_country_modifier = gnollish_administration }
		check_variable = {
			which = gnollish_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = gnollish_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_gnollish_race_trigger = {	# Is gnollish tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_gnollish_people_tooltip
		NOT = { has_country_modifier = gnollish_administration }
		NOT = {
			check_variable = {
				which = gnollish_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_gnollish_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	#custom_trigger_tooltip = {
		#tooltip = have_unmatching_gnollish_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_gnollish_race_trigger = yes }
				NOT = { owner = { has_country_modifier = gnollish_administration } }
				OR = {
					has_coexisting_gnollish_pop_trigger = yes
					has_oppressed_gnollish_pop_trigger = yes
					has_province_modifier = gnollish_majority_primary
				}
			}
			AND = {
				owner = { high_tolerance_gnollish_race_trigger = yes }
				owner = { has_country_modifier = gnollish_administration }
				OR = {
					has_coexisting_gnollish_pop_trigger = yes
					has_oppressed_gnollish_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_gnollish_race_trigger = yes }
				OR = {
					has_integrated_gnollish_pop_trigger = yes
					has_oppressed_gnollish_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_gnollish_race_trigger = yes }
				OR = {
					has_integrated_gnollish_pop_trigger = yes
					has_coexisting_gnollish_pop_trigger = yes
				}
			}
		}
	#}
}
# For Ai Only
wants_to_increase_tolerance_gnollish = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = gnollish_race_tolerance
			which = gnollish_race_tolerance_ai
		}
	}
}
wants_to_maintain_tolerance_gnollish = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = gnollish_race_tolerance_ai
		which = gnollish_race_tolerance
	}
}
wants_to_decrease_tolerance_gnollish = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = gnollish_race_tolerance
		which = gnollish_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = gnollish_race_tolerance_ai
			which = gnollish_race_tolerance
		}
	}
}

# RUINBORN -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_ruinborn_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_ruinborn_minority_tooltip
		OR = {
			has_province_modifier = ruinborn_minority_oppressed_small
			has_province_modifier = ruinborn_minority_coexisting_small
			has_province_modifier = ruinborn_minority_integrated_small
			has_province_modifier = ruinborn_minority_oppressed_large
			has_province_modifier = ruinborn_minority_coexisting_large
			has_province_modifier = ruinborn_minority_integrated_large
		}
	}
}
has_ruinborn_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_ruinborn_majority_tooltip
		OR = {
			has_province_modifier = ruinborn_majority_oppressed
			has_province_modifier = ruinborn_majority_coexisting
			has_province_modifier = ruinborn_majority_integrated
			has_province_modifier = ruinborn_majority_primary
		}
	}
}
has_small_ruinborn_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_ruinborn_minority_tooltip
		OR = {
			has_province_modifier = ruinborn_minority_oppressed_small
			has_province_modifier = ruinborn_minority_coexisting_small
			has_province_modifier = ruinborn_minority_integrated_small
		}
	}
}
has_large_ruinborn_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_ruinborn_minority_tooltip
		OR = {
			has_province_modifier = ruinborn_minority_oppressed_large
			has_province_modifier = ruinborn_minority_coexisting_large
			has_province_modifier = ruinborn_minority_integrated_large
		}
	}
}
has_oppressed_ruinborn_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_ruinborn_minority_tooltip
		OR = {
			has_province_modifier = ruinborn_minority_oppressed_small
			has_province_modifier = ruinborn_minority_oppressed_large
		}
	}
}
has_oppressed_ruinborn_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_ruinborn_pop_tooltip
		OR = {
			has_province_modifier = ruinborn_minority_oppressed_small
			has_province_modifier = ruinborn_minority_oppressed_large
			has_province_modifier = ruinborn_majority_oppressed
		}
	}
}
has_integrated_ruinborn_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_ruinborn_minority_tooltip
		OR = {
			has_province_modifier = ruinborn_minority_integrated_small
			has_province_modifier = ruinborn_minority_integrated_large
		}
	}
}
has_integrated_ruinborn_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_ruinborn_pop_tooltip
		OR = {
			has_province_modifier = ruinborn_minority_integrated_small
			has_province_modifier = ruinborn_minority_integrated_large
			has_province_modifier = ruinborn_majority_integrated
			has_province_modifier = ruinborn_majority_primary
		}
	}
}
has_coexisting_ruinborn_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_ruinborn_minority_tooltip
		OR = {
			has_province_modifier = ruinborn_minority_coexisting_small
			has_province_modifier = ruinborn_minority_coexisting_large
		}
	}
}
has_coexisting_ruinborn_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_ruinborn_pop_tooltip
		OR = {
			has_province_modifier = ruinborn_minority_coexisting_small
			has_province_modifier = ruinborn_minority_coexisting_large
			has_province_modifier = ruinborn_majority_coexisting
		}
	}
}
has_any_ruinborn_pop_trigger = {	#Any pop minority or majority
	OR = {
		has_province_modifier = ruinborn_minority_oppressed_small
		has_province_modifier = ruinborn_minority_oppressed_large
		has_province_modifier = ruinborn_majority_oppressed
		has_province_modifier = ruinborn_minority_coexisting_small
		has_province_modifier = ruinborn_minority_coexisting_large
		has_province_modifier = ruinborn_majority_coexisting
		has_province_modifier = ruinborn_minority_integrated_small
		has_province_modifier = ruinborn_minority_integrated_large
		has_province_modifier = ruinborn_majority_integrated
		has_province_modifier = ruinborn_majority_primary
	}
}
# Country level
max_tolerance_ruinborn_race_trigger = {	# Is ruinborn tolerance = 100
	check_variable = {
		which = ruinborn_race_tolerance
		which = 100
	}
}
high_tolerance_ruinborn_race_trigger = {	# Is ruinborn tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_ruinborn_people_tooltip
		OR = {
			check_variable = {
				which = ruinborn_race_tolerance
				value = 70
			}
			has_country_modifier = ruinborn_administration
		}
	}
}
medium_tolerance_ruinborn_race_trigger = {	# Is ruinborn tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_ruinborn_people_tooltip
		NOT = { has_country_modifier = ruinborn_administration }
		check_variable = {
			which = ruinborn_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = ruinborn_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_ruinborn_race_trigger = {	# Is ruinborn tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_ruinborn_people_tooltip
		NOT = { has_country_modifier = ruinborn_administration }
		NOT = {
			check_variable = {
				which = ruinborn_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_ruinborn_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	#custom_trigger_tooltip = {
		#tooltip = have_unmatching_ruinborn_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_ruinborn_race_trigger = yes }
				NOT = { owner = { has_country_modifier = ruinborn_administration } }
				OR = {
					has_coexisting_ruinborn_pop_trigger = yes
					has_oppressed_ruinborn_pop_trigger = yes
					has_province_modifier = ruinborn_majority_primary
				}
			}
			AND = {
				owner = { high_tolerance_ruinborn_race_trigger = yes }
				owner = { has_country_modifier = ruinborn_administration }
				OR = {
					has_coexisting_ruinborn_pop_trigger = yes
					has_oppressed_ruinborn_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_ruinborn_race_trigger = yes }
				OR = {
					has_integrated_ruinborn_pop_trigger = yes
					has_oppressed_ruinborn_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_ruinborn_race_trigger = yes }
				OR = {
					has_integrated_ruinborn_pop_trigger = yes
					has_coexisting_ruinborn_pop_trigger = yes
				}
			}
		}
	#}
}
# For Ai Only
wants_to_increase_tolerance_ruinborn = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = ruinborn_race_tolerance
			which = ruinborn_race_tolerance_ai
		}
	}
}
wants_to_maintain_tolerance_ruinborn = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = ruinborn_race_tolerance_ai
		which = ruinborn_race_tolerance
	}
}
wants_to_decrease_tolerance_ruinborn = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = ruinborn_race_tolerance
		which = ruinborn_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = ruinborn_race_tolerance_ai
			which = ruinborn_race_tolerance
		}
	}
}

# GOBLIN -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_goblin_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_goblin_minority_tooltip
		OR = {
			has_province_modifier = goblin_minority_oppressed_small
			has_province_modifier = goblin_minority_coexisting_small
			has_province_modifier = goblin_minority_integrated_small
			has_province_modifier = goblin_minority_oppressed_large
			has_province_modifier = goblin_minority_coexisting_large
			has_province_modifier = goblin_minority_integrated_large
		}
	}
}
has_goblin_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_goblin_majority_tooltip
		OR = {
			has_province_modifier = goblin_majority_oppressed
			has_province_modifier = goblin_majority_coexisting
			has_province_modifier = goblin_majority_integrated
			has_province_modifier = goblin_majority_primary
		}
	}
}
has_small_goblin_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_goblin_minority_tooltip
		OR = {
			has_province_modifier = goblin_minority_oppressed_small
			has_province_modifier = goblin_minority_coexisting_small
			has_province_modifier = goblin_minority_integrated_small
		}
	}
}
has_large_goblin_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_goblin_minority_tooltip
		OR = {
			has_province_modifier = goblin_minority_oppressed_large
			has_province_modifier = goblin_minority_coexisting_large
			has_province_modifier = goblin_minority_integrated_large
		}
	}
}
has_oppressed_goblin_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_goblin_minority_tooltip
		OR = {
			has_province_modifier = goblin_minority_oppressed_small
			has_province_modifier = goblin_minority_oppressed_large
		}
	}
}
has_oppressed_goblin_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_goblin_pop_tooltip
		OR = {
			has_province_modifier = goblin_minority_oppressed_small
			has_province_modifier = goblin_minority_oppressed_large
			has_province_modifier = goblin_majority_oppressed
		}
	}
}
has_integrated_goblin_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_goblin_minority_tooltip
		OR = {
			has_province_modifier = goblin_minority_integrated_small
			has_province_modifier = goblin_minority_integrated_large
		}
	}
}
has_integrated_goblin_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_goblin_pop_tooltip
		OR = {
			has_province_modifier = goblin_minority_integrated_small
			has_province_modifier = goblin_minority_integrated_large
			has_province_modifier = goblin_majority_integrated
			has_province_modifier = goblin_majority_primary
		}
	}
}
has_coexisting_goblin_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_goblin_minority_tooltip
		OR = {
			has_province_modifier = goblin_minority_coexisting_small
			has_province_modifier = goblin_minority_coexisting_large
		}
	}
}
has_coexisting_goblin_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_goblin_pop_tooltip
		OR = {
			has_province_modifier = goblin_minority_coexisting_small
			has_province_modifier = goblin_minority_coexisting_large
			has_province_modifier = goblin_majority_coexisting
		}
	}
}
has_any_goblin_pop_trigger = {	#Any pop minority or majority
	OR = {
		has_province_modifier = goblin_minority_oppressed_small
		has_province_modifier = goblin_minority_oppressed_large
		has_province_modifier = goblin_majority_oppressed
		has_province_modifier = goblin_minority_coexisting_small
		has_province_modifier = goblin_minority_coexisting_large
		has_province_modifier = goblin_majority_coexisting
		has_province_modifier = goblin_minority_integrated_small
		has_province_modifier = goblin_minority_integrated_large
		has_province_modifier = goblin_majority_integrated
		has_province_modifier = goblin_majority_primary
	}
}
# Country level
max_tolerance_goblin_race_trigger = {	# Is goblin tolerance = 100
	check_variable = {
		which = goblin_race_tolerance
		which = 100
	}
}
high_tolerance_goblin_race_trigger = {	# Is goblin tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_goblin_people_tooltip
		OR = {
			check_variable = {
				which = goblin_race_tolerance
				value = 70
			}
			has_country_modifier = goblin_administration
		}
	}
}
medium_tolerance_goblin_race_trigger = {	# Is goblin tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_goblin_people_tooltip
		NOT = { has_country_modifier = goblin_administration }
		check_variable = {
			which = goblin_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = goblin_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_goblin_race_trigger = {	# Is goblin tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_goblin_people_tooltip
		NOT = { has_country_modifier = goblin_administration }
		NOT = {
			check_variable = {
				which = goblin_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_goblin_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	#custom_trigger_tooltip = {
		#tooltip = have_unmatching_goblin_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_goblin_race_trigger = yes }
				NOT = { owner = { has_country_modifier = goblin_administration } }
				OR = {
					has_coexisting_goblin_pop_trigger = yes
					has_oppressed_goblin_pop_trigger = yes
					has_province_modifier = goblin_majority_primary
				}
			}
			AND = {
				owner = { high_tolerance_goblin_race_trigger = yes }
				owner = { has_country_modifier = goblin_administration }
				OR = {
					has_coexisting_goblin_pop_trigger = yes
					has_oppressed_goblin_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_goblin_race_trigger = yes }
				OR = {
					has_integrated_goblin_pop_trigger = yes
					has_oppressed_goblin_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_goblin_race_trigger = yes }
				OR = {
					has_integrated_goblin_pop_trigger = yes
					has_coexisting_goblin_pop_trigger = yes
				}
			}
		}
	#}
}
# For Ai Only
wants_to_increase_tolerance_goblin = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = goblin_race_tolerance
			which = goblin_race_tolerance_ai
		}
	}
}
wants_to_maintain_tolerance_goblin = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = goblin_race_tolerance_ai
		which = goblin_race_tolerance
	}
}
wants_to_decrease_tolerance_goblin = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = goblin_race_tolerance
		which = goblin_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = goblin_race_tolerance_ai
			which = goblin_race_tolerance
		}
	}
}

# HARPY -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_harpy_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_harpy_minority_tooltip
		OR = {
			has_province_modifier = harpy_minority_oppressed_small
			has_province_modifier = harpy_minority_coexisting_small
			has_province_modifier = harpy_minority_integrated_small
			has_province_modifier = harpy_minority_oppressed_large
			has_province_modifier = harpy_minority_coexisting_large
			has_province_modifier = harpy_minority_integrated_large
		}
	}
}
has_harpy_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_harpy_majority_tooltip
		OR = {
			has_province_modifier = harpy_majority_oppressed
			has_province_modifier = harpy_majority_coexisting
			has_province_modifier = harpy_majority_integrated
			has_province_modifier = harpy_majority_primary
		}
	}
}
has_small_harpy_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_harpy_minority_tooltip
		OR = {
			has_province_modifier = harpy_minority_oppressed_small
			has_province_modifier = harpy_minority_coexisting_small
			has_province_modifier = harpy_minority_integrated_small
		}
	}
}
has_large_harpy_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_harpy_minority_tooltip
		OR = {
			has_province_modifier = harpy_minority_oppressed_large
			has_province_modifier = harpy_minority_coexisting_large
			has_province_modifier = harpy_minority_integrated_large
		}
	}
}
has_oppressed_harpy_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_harpy_minority_tooltip
		OR = {
			has_province_modifier = harpy_minority_oppressed_small
			has_province_modifier = harpy_minority_oppressed_large
		}
	}
}
has_oppressed_harpy_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_harpy_pop_tooltip
		OR = {
			has_province_modifier = harpy_minority_oppressed_small
			has_province_modifier = harpy_minority_oppressed_large
			has_province_modifier = harpy_majority_oppressed
		}
	}
}
has_integrated_harpy_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_harpy_minority_tooltip
		OR = {
			has_province_modifier = harpy_minority_integrated_small
			has_province_modifier = harpy_minority_integrated_large
		}
	}
}
has_integrated_harpy_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_harpy_pop_tooltip
		OR = {
			has_province_modifier = harpy_minority_integrated_small
			has_province_modifier = harpy_minority_integrated_large
			has_province_modifier = harpy_majority_integrated
			has_province_modifier = harpy_majority_primary
		}
	}
}
has_coexisting_harpy_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_harpy_minority_tooltip
		OR = {
			has_province_modifier = harpy_minority_coexisting_small
			has_province_modifier = harpy_minority_coexisting_large
		}
	}
}
has_coexisting_harpy_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_harpy_pop_tooltip
		OR = {
			has_province_modifier = harpy_minority_coexisting_small
			has_province_modifier = harpy_minority_coexisting_large
			has_province_modifier = harpy_majority_coexisting
		}
	}
}
has_any_harpy_pop_trigger = {	#Any pop minority or majority
	OR = {
		has_province_modifier = harpy_minority_oppressed_small
		has_province_modifier = harpy_minority_oppressed_large
		has_province_modifier = harpy_majority_oppressed
		has_province_modifier = harpy_minority_coexisting_small
		has_province_modifier = harpy_minority_coexisting_large
		has_province_modifier = harpy_majority_coexisting
		has_province_modifier = harpy_minority_integrated_small
		has_province_modifier = harpy_minority_integrated_large
		has_province_modifier = harpy_majority_integrated
		has_province_modifier = harpy_majority_primary
	}
}
# Country level
max_tolerance_harpy_race_trigger = {	# Is harpy tolerance = 100
	check_variable = {
		which = harpy_race_tolerance
		which = 100
	}
}
high_tolerance_harpy_race_trigger = {	# Is harpy tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_harpy_people_tooltip
		OR = {
			check_variable = {
				which = harpy_race_tolerance
				value = 70
			}
			has_country_modifier = harpy_administration
		}
	}
}
medium_tolerance_harpy_race_trigger = {	# Is harpy tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_harpy_people_tooltip
		NOT = { has_country_modifier = harpy_administration }
		check_variable = {
			which = harpy_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = harpy_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_harpy_race_trigger = {	# Is harpy tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_harpy_people_tooltip
		NOT = { has_country_modifier = harpy_administration }
		NOT = {
			check_variable = {
				which = harpy_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_harpy_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	#custom_trigger_tooltip = {
		#tooltip = have_unmatching_harpy_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_harpy_race_trigger = yes }
				NOT = { owner = { has_country_modifier = harpy_administration } }
				OR = {
					has_coexisting_harpy_pop_trigger = yes
					has_oppressed_harpy_pop_trigger = yes
					has_province_modifier = harpy_majority_primary
				}
			}
			AND = {
				owner = { high_tolerance_harpy_race_trigger = yes }
				owner = { has_country_modifier = harpy_administration }
				OR = {
					has_coexisting_harpy_pop_trigger = yes
					has_oppressed_harpy_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_harpy_race_trigger = yes }
				OR = {
					has_integrated_harpy_pop_trigger = yes
					has_oppressed_harpy_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_harpy_race_trigger = yes }
				OR = {
					has_integrated_harpy_pop_trigger = yes
					has_coexisting_harpy_pop_trigger = yes
				}
			}
		}
	#}
}
# For Ai Only
wants_to_increase_tolerance_harpy = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = harpy_race_tolerance
			which = harpy_race_tolerance_ai
		}
	}
}
wants_to_maintain_tolerance_harpy = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = harpy_race_tolerance_ai
		which = harpy_race_tolerance
	}
}
wants_to_decrease_tolerance_harpy = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = harpy_race_tolerance
		which = harpy_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = harpy_race_tolerance_ai
			which = harpy_race_tolerance
		}
	}
}

# TROLL -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_troll_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_troll_minority_tooltip
		OR = {
			has_province_modifier = troll_minority_oppressed_small
			has_province_modifier = troll_minority_coexisting_small
			has_province_modifier = troll_minority_integrated_small
			has_province_modifier = troll_minority_oppressed_large
			has_province_modifier = troll_minority_coexisting_large
			has_province_modifier = troll_minority_integrated_large
		}
	}
}
has_troll_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_troll_majority_tooltip
		OR = {
			has_province_modifier = troll_majority_oppressed
			has_province_modifier = troll_majority_coexisting
			has_province_modifier = troll_majority_integrated
			has_province_modifier = troll_majority_primary
		}
	}
}
has_small_troll_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_troll_minority_tooltip
		OR = {
			has_province_modifier = troll_minority_oppressed_small
			has_province_modifier = troll_minority_coexisting_small
			has_province_modifier = troll_minority_integrated_small
		}
	}
}
has_large_troll_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_troll_minority_tooltip
		OR = {
			has_province_modifier = troll_minority_oppressed_large
			has_province_modifier = troll_minority_coexisting_large
			has_province_modifier = troll_minority_integrated_large
		}
	}
}
has_oppressed_troll_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_troll_minority_tooltip
		OR = {
			has_province_modifier = troll_minority_oppressed_small
			has_province_modifier = troll_minority_oppressed_large
		}
	}
}
has_oppressed_troll_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_troll_pop_tooltip
		OR = {
			has_province_modifier = troll_minority_oppressed_small
			has_province_modifier = troll_minority_oppressed_large
			has_province_modifier = troll_majority_oppressed
		}
	}
}
has_integrated_troll_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_troll_minority_tooltip
		OR = {
			has_province_modifier = troll_minority_integrated_small
			has_province_modifier = troll_minority_integrated_large
		}
	}
}
has_integrated_troll_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_troll_pop_tooltip
		OR = {
			has_province_modifier = troll_minority_integrated_small
			has_province_modifier = troll_minority_integrated_large
			has_province_modifier = troll_majority_integrated
			has_province_modifier = troll_majority_primary
		}
	}
}
has_coexisting_troll_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_troll_minority_tooltip
		OR = {
			has_province_modifier = troll_minority_coexisting_small
			has_province_modifier = troll_minority_coexisting_large
		}
	}
}
has_coexisting_troll_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_troll_pop_tooltip
		OR = {
			has_province_modifier = troll_minority_coexisting_small
			has_province_modifier = troll_minority_coexisting_large
			has_province_modifier = troll_majority_coexisting
		}
	}
}
has_any_troll_pop_trigger = {	#Any pop minority or majority
	OR = {
		has_province_modifier = troll_minority_oppressed_small
		has_province_modifier = troll_minority_oppressed_large
		has_province_modifier = troll_majority_oppressed
		has_province_modifier = troll_minority_coexisting_small
		has_province_modifier = troll_minority_coexisting_large
		has_province_modifier = troll_majority_coexisting
		has_province_modifier = troll_minority_integrated_small
		has_province_modifier = troll_minority_integrated_large
		has_province_modifier = troll_majority_integrated
		has_province_modifier = troll_majority_primary
	}
}
# Country level
max_tolerance_troll_race_trigger = {	# Is troll tolerance = 100
	check_variable = {
		which = troll_race_tolerance
		which = 100
	}
}
high_tolerance_troll_race_trigger = {	# Is troll tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_troll_people_tooltip
		OR = {
			check_variable = {
				which = troll_race_tolerance
				value = 70
			}
			has_country_modifier = troll_administration
		}
	}
}
medium_tolerance_troll_race_trigger = {	# Is troll tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_troll_people_tooltip
		NOT = { has_country_modifier = troll_administration }
		check_variable = {
			which = troll_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = troll_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_troll_race_trigger = {	# Is troll tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_troll_people_tooltip
		NOT = { has_country_modifier = troll_administration }
		NOT = {
			check_variable = {
				which = troll_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_troll_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	#custom_trigger_tooltip = {
		#tooltip = have_unmatching_troll_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_troll_race_trigger = yes }
				NOT = { owner = { has_country_modifier = troll_administration } }
				OR = {
					has_coexisting_troll_pop_trigger = yes
					has_oppressed_troll_pop_trigger = yes
					has_province_modifier = troll_majority_primary
				}
			}
			AND = {
				owner = { high_tolerance_troll_race_trigger = yes }
				owner = { has_country_modifier = troll_administration }
				OR = {
					has_coexisting_troll_pop_trigger = yes
					has_oppressed_troll_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_troll_race_trigger = yes }
				OR = {
					has_integrated_troll_pop_trigger = yes
					has_oppressed_troll_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_troll_race_trigger = yes }
				OR = {
					has_integrated_troll_pop_trigger = yes
					has_coexisting_troll_pop_trigger = yes
				}
			}
		}
	#}
}
# For Ai Only
wants_to_increase_tolerance_troll = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = troll_race_tolerance
			which = troll_race_tolerance_ai
		}
	}
}
wants_to_maintain_tolerance_troll = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = troll_race_tolerance_ai
		which = troll_race_tolerance
	}
}
wants_to_decrease_tolerance_troll = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = troll_race_tolerance
		which = troll_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = troll_race_tolerance_ai
			which = troll_race_tolerance
		}
	}
}

# HALF ELVEN -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_half_elven_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_half_elven_minority_tooltip
		OR = {
			has_province_modifier = half_elven_minority_oppressed_small
			has_province_modifier = half_elven_minority_coexisting_small
			has_province_modifier = half_elven_minority_integrated_small
			has_province_modifier = half_elven_minority_oppressed_large
			has_province_modifier = half_elven_minority_coexisting_large
			has_province_modifier = half_elven_minority_integrated_large
		}
	}
}
has_half_elven_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_half_elven_majority_tooltip
		OR = {
			has_province_modifier = half_elven_majority_oppressed
			has_province_modifier = half_elven_majority_coexisting
			has_province_modifier = half_elven_majority_integrated
			has_province_modifier = half_elven_majority_primary
		}
	}
}
has_small_half_elven_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_half_elven_minority_tooltip
		OR = {
			has_province_modifier = half_elven_minority_oppressed_small
			has_province_modifier = half_elven_minority_coexisting_small
			has_province_modifier = half_elven_minority_integrated_small
		}
	}
}
has_large_half_elven_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_half_elven_minority_tooltip
		OR = {
			has_province_modifier = half_elven_minority_oppressed_large
			has_province_modifier = half_elven_minority_coexisting_large
			has_province_modifier = half_elven_minority_integrated_large
		}
	}
}
has_oppressed_half_elven_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_half_elven_minority_tooltip
		OR = {
			has_province_modifier = half_elven_minority_oppressed_small
			has_province_modifier = half_elven_minority_oppressed_large
		}
	}
}
has_oppressed_half_elven_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_half_elven_pop_tooltip
		OR = {
			has_province_modifier = half_elven_minority_oppressed_small
			has_province_modifier = half_elven_minority_oppressed_large
			has_province_modifier = half_elven_majority_oppressed
		}
	}
}
has_integrated_half_elven_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_half_elven_minority_tooltip
		OR = {
			has_province_modifier = half_elven_minority_integrated_small
			has_province_modifier = half_elven_minority_integrated_large
		}
	}
}
has_integrated_half_elven_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_half_elven_pop_tooltip
		OR = {
			has_province_modifier = half_elven_minority_integrated_small
			has_province_modifier = half_elven_minority_integrated_large
			has_province_modifier = half_elven_majority_integrated
			has_province_modifier = half_elven_majority_primary
		}
	}
}
has_coexisting_half_elven_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_half_elven_minority_tooltip
		OR = {
			has_province_modifier = half_elven_minority_coexisting_small
			has_province_modifier = half_elven_minority_coexisting_large
		}
	}
}
has_coexisting_half_elven_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_half_elven_pop_tooltip
		OR = {
			has_province_modifier = half_elven_minority_coexisting_small
			has_province_modifier = half_elven_minority_coexisting_large
			has_province_modifier = half_elven_majority_coexisting
		}
	}
}
has_any_half_elven_pop_trigger = {	#Any pop minority or majority
	OR = {
		has_province_modifier = half_elven_minority_oppressed_small
		has_province_modifier = half_elven_minority_oppressed_large
		has_province_modifier = half_elven_majority_oppressed
		has_province_modifier = half_elven_minority_coexisting_small
		has_province_modifier = half_elven_minority_coexisting_large
		has_province_modifier = half_elven_majority_coexisting
		has_province_modifier = half_elven_minority_integrated_small
		has_province_modifier = half_elven_minority_integrated_large
		has_province_modifier = half_elven_majority_integrated
		has_province_modifier = half_elven_majority_primary
	}
}
# Country level
max_tolerance_half_elven_race_trigger = {	# Is half_elven tolerance = 100
	check_variable = {
		which = half_elven_race_tolerance
		which = 100
	}
}
high_tolerance_half_elven_race_trigger = {	# Is half_elven tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_half_elven_people_tooltip
		OR = {
			check_variable = {
				which = half_elven_race_tolerance
				value = 70
			}
			has_country_modifier = half_elven_administration
		}
	}
}
medium_tolerance_half_elven_race_trigger = {	# Is half_elven tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_half_elven_people_tooltip
		NOT = { has_country_modifier = half_elven_administration }
		check_variable = {
			which = half_elven_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = half_elven_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_half_elven_race_trigger = {	# Is half_elven tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_half_elven_people_tooltip
		NOT = { has_country_modifier = half_elven_administration }
		NOT = {
			check_variable = {
				which = half_elven_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_half_elven_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	#custom_trigger_tooltip = {
		#tooltip = have_unmatching_half_elven_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_half_elven_race_trigger = yes }
				OR = {
					has_coexisting_half_elven_pop_trigger = yes
					has_oppressed_half_elven_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_half_elven_race_trigger = yes }
				OR = {
					has_integrated_half_elven_pop_trigger = yes
					has_oppressed_half_elven_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_half_elven_race_trigger = yes }
				OR = {
					has_integrated_half_elven_pop_trigger = yes
					has_coexisting_half_elven_pop_trigger = yes
				}
			}
		}
	#}
}
# For Ai Only
wants_to_increase_tolerance_half_elven = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = half_elven_race_tolerance
			which = half_elven_race_tolerance_ai
		}
	}
}
wants_to_maintain_tolerance_half_elven = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = half_elven_race_tolerance_ai
		which = half_elven_race_tolerance
	}
}
wants_to_decrease_tolerance_half_elven = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = half_elven_race_tolerance
		which = half_elven_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = half_elven_race_tolerance_ai
			which = half_elven_race_tolerance
		}
	}
}

# ORCISH -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_orcish_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_orcish_minority_tooltip
		OR = {
			has_province_modifier = orcish_minority_oppressed_small
			has_province_modifier = orcish_minority_coexisting_small
			has_province_modifier = orcish_minority_integrated_small
			has_province_modifier = orcish_minority_oppressed_large
			has_province_modifier = orcish_minority_coexisting_large
			has_province_modifier = orcish_minority_integrated_large
		}
	}
}
has_orcish_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_orcish_majority_tooltip
		OR = {
			has_province_modifier = orcish_majority_oppressed
			has_province_modifier = orcish_majority_coexisting
			has_province_modifier = orcish_majority_integrated
			has_province_modifier = orcish_majority_primary
		}
	}
}
has_small_orcish_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_orcish_minority_tooltip
		OR = {
			has_province_modifier = orcish_minority_oppressed_small
			has_province_modifier = orcish_minority_coexisting_small
			has_province_modifier = orcish_minority_integrated_small
		}
	}
}
has_large_orcish_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_orcish_minority_tooltip
		OR = {
			has_province_modifier = orcish_minority_oppressed_large
			has_province_modifier = orcish_minority_coexisting_large
			has_province_modifier = orcish_minority_integrated_large
		}
	}
}
has_oppressed_orcish_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_orcish_minority_tooltip
		OR = {
			has_province_modifier = orcish_minority_oppressed_small
			has_province_modifier = orcish_minority_oppressed_large
		}
	}
}
has_oppressed_orcish_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_orcish_pop_tooltip
		OR = {
			has_province_modifier = orcish_minority_oppressed_small
			has_province_modifier = orcish_minority_oppressed_large
			has_province_modifier = orcish_majority_oppressed
		}
	}
}
has_integrated_orcish_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_orcish_minority_tooltip
		OR = {
			has_province_modifier = orcish_minority_integrated_small
			has_province_modifier = orcish_minority_integrated_large
		}
	}
}
has_integrated_orcish_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_orcish_pop_tooltip
		OR = {
			has_province_modifier = orcish_minority_integrated_small
			has_province_modifier = orcish_minority_integrated_large
			has_province_modifier = orcish_majority_integrated
			has_province_modifier = orcish_majority_primary
		}
	}
}
has_coexisting_orcish_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_orcish_minority_tooltip
		OR = {
			has_province_modifier = orcish_minority_coexisting_small
			has_province_modifier = orcish_minority_coexisting_large
		}
	}
}
has_coexisting_orcish_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_orcish_pop_tooltip
		OR = {
			has_province_modifier = orcish_minority_coexisting_small
			has_province_modifier = orcish_minority_coexisting_large
			has_province_modifier = orcish_majority_coexisting
		}
	}
}
has_any_orcish_pop_trigger = {	#Any pop minority or majority
	OR = {
		has_province_modifier = orcish_minority_oppressed_small
		has_province_modifier = orcish_minority_oppressed_large
		has_province_modifier = orcish_majority_oppressed
		has_province_modifier = orcish_minority_coexisting_small
		has_province_modifier = orcish_minority_coexisting_large
		has_province_modifier = orcish_majority_coexisting
		has_province_modifier = orcish_minority_integrated_small
		has_province_modifier = orcish_minority_integrated_large
		has_province_modifier = orcish_majority_integrated
		has_province_modifier = orcish_majority_primary
	}
}
# Country level
max_tolerance_orcish_race_trigger = {	# Is orcish tolerance = 100
	check_variable = {
		which = orcish_race_tolerance
		which = 100
	}
}
high_tolerance_orcish_race_trigger = {	# Is orcish tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_orcish_people_tooltip
		OR = {
			check_variable = {
				which = orcish_race_tolerance
				value = 70
			}
			has_country_modifier = orcish_administration
		}
	}
}
medium_tolerance_orcish_race_trigger = {	# Is orcish tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_orcish_people_tooltip
		NOT = { has_country_modifier = orcish_administration }
		check_variable = {
			which = orcish_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = orcish_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_orcish_race_trigger = {	# Is orcish tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_orcish_people_tooltip
		NOT = { has_country_modifier = orcish_administration }
		NOT = {
			check_variable = {
				which = orcish_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_orcish_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	#custom_trigger_tooltip = {
		#tooltip = have_unmatching_orcish_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_orcish_race_trigger = yes }
				NOT = { owner = { has_country_modifier = orcish_administration } }
				OR = {
					has_coexisting_orcish_pop_trigger = yes
					has_oppressed_orcish_pop_trigger = yes
					has_province_modifier = orcish_majority_primary
				}
			}
			AND = {
				owner = { high_tolerance_orcish_race_trigger = yes }
				owner = { has_country_modifier = orcish_administration }
				OR = {
					has_coexisting_orcish_pop_trigger = yes
					has_oppressed_orcish_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_orcish_race_trigger = yes }
				OR = {
					has_integrated_orcish_pop_trigger = yes
					has_oppressed_orcish_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_orcish_race_trigger = yes }
				OR = {
					has_integrated_orcish_pop_trigger = yes
					has_coexisting_orcish_pop_trigger = yes
				}
			}
		}
	#}
}
# For Ai Only
wants_to_increase_tolerance_orcish = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = orcish_race_tolerance
			which = orcish_race_tolerance_ai
		}
	}
}
wants_to_maintain_tolerance_orcish = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = orcish_race_tolerance_ai
		which = orcish_race_tolerance
	}
}
wants_to_decrease_tolerance_orcish = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = orcish_race_tolerance
		which = orcish_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = orcish_race_tolerance_ai
			which = orcish_race_tolerance
		}
	}
}

# OGRE -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_ogre_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_ogre_minority_tooltip
		OR = {
			has_province_modifier = ogre_minority_oppressed_small
			has_province_modifier = ogre_minority_coexisting_small
			has_province_modifier = ogre_minority_integrated_small
			has_province_modifier = ogre_minority_oppressed_large
			has_province_modifier = ogre_minority_coexisting_large
			has_province_modifier = ogre_minority_integrated_large
		}
	}
}
has_ogre_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_ogre_majority_tooltip
		OR = {
			has_province_modifier = ogre_majority_oppressed
			has_province_modifier = ogre_majority_coexisting
			has_province_modifier = ogre_majority_integrated
			has_province_modifier = ogre_majority_primary
		}
	}
}
has_small_ogre_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_ogre_minority_tooltip
		OR = {
			has_province_modifier = ogre_minority_oppressed_small
			has_province_modifier = ogre_minority_coexisting_small
			has_province_modifier = ogre_minority_integrated_small
		}
	}
}
has_large_ogre_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_ogre_minority_tooltip
		OR = {
			has_province_modifier = ogre_minority_oppressed_large
			has_province_modifier = ogre_minority_coexisting_large
			has_province_modifier = ogre_minority_integrated_large
		}
	}
}
has_oppressed_ogre_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_ogre_minority_tooltip
		OR = {
			has_province_modifier = ogre_minority_oppressed_small
			has_province_modifier = ogre_minority_oppressed_large
		}
	}
}
has_oppressed_ogre_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_ogre_pop_tooltip
		OR = {
			has_province_modifier = ogre_minority_oppressed_small
			has_province_modifier = ogre_minority_oppressed_large
			has_province_modifier = ogre_majority_oppressed
		}
	}
}
has_integrated_ogre_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_ogre_minority_tooltip
		OR = {
			has_province_modifier = ogre_minority_integrated_small
			has_province_modifier = ogre_minority_integrated_large
		}
	}
}
has_integrated_ogre_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_ogre_pop_tooltip
		OR = {
			has_province_modifier = ogre_minority_integrated_small
			has_province_modifier = ogre_minority_integrated_large
			has_province_modifier = ogre_majority_integrated
			has_province_modifier = ogre_majority_primary
		}
	}
}
has_coexisting_ogre_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_ogre_minority_tooltip
		OR = {
			has_province_modifier = ogre_minority_coexisting_small
			has_province_modifier = ogre_minority_coexisting_large
		}
	}
}
has_coexisting_ogre_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_ogre_pop_tooltip
		OR = {
			has_province_modifier = ogre_minority_coexisting_small
			has_province_modifier = ogre_minority_coexisting_large
			has_province_modifier = ogre_majority_coexisting
		}
	}
}
has_any_ogre_pop_trigger = {	#Any pop minority or majority
	OR = {
		has_province_modifier = ogre_minority_oppressed_small
		has_province_modifier = ogre_minority_oppressed_large
		has_province_modifier = ogre_majority_oppressed
		has_province_modifier = ogre_minority_coexisting_small
		has_province_modifier = ogre_minority_coexisting_large
		has_province_modifier = ogre_majority_coexisting
		has_province_modifier = ogre_minority_integrated_small
		has_province_modifier = ogre_minority_integrated_large
		has_province_modifier = ogre_majority_integrated
		has_province_modifier = ogre_majority_primary
	}
}
# Country level
max_tolerance_ogre_race_trigger = {	# Is ogre tolerance = 100
	check_variable = {
		which = ogre_race_tolerance
		which = 100
	}
}
high_tolerance_ogre_race_trigger = {	# Is ogre tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_ogre_people_tooltip
		OR = {
			check_variable = {
				which = ogre_race_tolerance
				value = 70
			}
			has_country_modifier = ogre_administration
		}
	}
}
medium_tolerance_ogre_race_trigger = {	# Is ogre tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_ogre_people_tooltip
		NOT = { has_country_modifier = ogre_administration }
		check_variable = {
			which = ogre_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = ogre_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_ogre_race_trigger = {	# Is ogre tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_ogre_people_tooltip
		NOT = { has_country_modifier = ogre_administration }
		NOT = {
			check_variable = {
				which = ogre_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_ogre_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	#custom_trigger_tooltip = {
		#tooltip = have_unmatching_ogre_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_ogre_race_trigger = yes }
				NOT = { owner = { has_country_modifier = ogre_administration } }
				OR = {
					has_coexisting_ogre_pop_trigger = yes
					has_oppressed_ogre_pop_trigger = yes
					has_province_modifier = ogre_majority_primary
				}
			}
			AND = {
				owner = { high_tolerance_ogre_race_trigger = yes }
				owner = { has_country_modifier = ogre_administration }
				OR = {
					has_coexisting_ogre_pop_trigger = yes
					has_oppressed_ogre_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_ogre_race_trigger = yes }
				OR = {
					has_integrated_ogre_pop_trigger = yes
					has_oppressed_ogre_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_ogre_race_trigger = yes }
				OR = {
					has_integrated_ogre_pop_trigger = yes
					has_coexisting_ogre_pop_trigger = yes
				}
			}
		}
	#}
}
# For Ai Only
wants_to_increase_tolerance_ogre = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = ogre_race_tolerance
			which = ogre_race_tolerance_ai
		}
	}
}
wants_to_maintain_tolerance_ogre = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = ogre_race_tolerance_ai
		which = ogre_race_tolerance
	}
}
wants_to_decrease_tolerance_ogre = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = ogre_race_tolerance
		which = ogre_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = ogre_race_tolerance_ai
			which = ogre_race_tolerance
		}
	}
}

# CENTAUR -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_centaur_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_centaur_minority_tooltip
		OR = {
			has_province_modifier = centaur_minority_oppressed_small
			has_province_modifier = centaur_minority_coexisting_small
			has_province_modifier = centaur_minority_integrated_small
			has_province_modifier = centaur_minority_oppressed_large
			has_province_modifier = centaur_minority_coexisting_large
			has_province_modifier = centaur_minority_integrated_large
		}
	}
}
has_centaur_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_centaur_majority_tooltip
		OR = {
			has_province_modifier = centaur_majority_oppressed
			has_province_modifier = centaur_majority_coexisting
			has_province_modifier = centaur_majority_integrated
			has_province_modifier = centaur_majority_primary
		}
	}
}
has_small_centaur_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_centaur_minority_tooltip
		OR = {
			has_province_modifier = centaur_minority_oppressed_small
			has_province_modifier = centaur_minority_coexisting_small
			has_province_modifier = centaur_minority_integrated_small
		}
	}
}
has_large_centaur_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_centaur_minority_tooltip
		OR = {
			has_province_modifier = centaur_minority_oppressed_large
			has_province_modifier = centaur_minority_coexisting_large
			has_province_modifier = centaur_minority_integrated_large
		}
	}
}
has_oppressed_centaur_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_centaur_minority_tooltip
		OR = {
			has_province_modifier = centaur_minority_oppressed_small
			has_province_modifier = centaur_minority_oppressed_large
		}
	}
}
has_oppressed_centaur_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_centaur_pop_tooltip
		OR = {
			has_province_modifier = centaur_minority_oppressed_small
			has_province_modifier = centaur_minority_oppressed_large
			has_province_modifier = centaur_majority_oppressed
		}
	}
}
has_integrated_centaur_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_centaur_minority_tooltip
		OR = {
			has_province_modifier = centaur_minority_integrated_small
			has_province_modifier = centaur_minority_integrated_large
		}
	}
}
has_integrated_centaur_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_centaur_pop_tooltip
		OR = {
			has_province_modifier = centaur_minority_integrated_small
			has_province_modifier = centaur_minority_integrated_large
			has_province_modifier = centaur_majority_integrated
			has_province_modifier = centaur_majority_primary
		}
	}
}
has_coexisting_centaur_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_centaur_minority_tooltip
		OR = {
			has_province_modifier = centaur_minority_coexisting_small
			has_province_modifier = centaur_minority_coexisting_large
		}
	}
}
has_coexisting_centaur_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_centaur_pop_tooltip
		OR = {
			has_province_modifier = centaur_minority_coexisting_small
			has_province_modifier = centaur_minority_coexisting_large
			has_province_modifier = centaur_majority_coexisting
		}
	}
}
has_any_centaur_pop_trigger = {	#Any pop minority or majority
	OR = {
		has_province_modifier = centaur_minority_oppressed_small
		has_province_modifier = centaur_minority_oppressed_large
		has_province_modifier = centaur_majority_oppressed
		has_province_modifier = centaur_minority_coexisting_small
		has_province_modifier = centaur_minority_coexisting_large
		has_province_modifier = centaur_majority_coexisting
		has_province_modifier = centaur_minority_integrated_small
		has_province_modifier = centaur_minority_integrated_large
		has_province_modifier = centaur_majority_integrated
		has_province_modifier = centaur_majority_primary
	}
}
# Country level
max_tolerance_centaur_race_trigger = {	# Is centaur tolerance = 100
	check_variable = {
		which = centaur_race_tolerance
		which = 100
	}
}
high_tolerance_centaur_race_trigger = {	# Is centaur tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_centaur_people_tooltip
		OR = {
			check_variable = {
				which = centaur_race_tolerance
				value = 70
			}
			has_country_modifier = centaur_administration
		}
	}
}
medium_tolerance_centaur_race_trigger = {	# Is centaur tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_centaur_people_tooltip
		NOT = { has_country_modifier = centaur_administration }
		check_variable = {
			which = centaur_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = centaur_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_centaur_race_trigger = {	# Is centaur tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_centaur_people_tooltip
		NOT = { has_country_modifier = centaur_administration }
		NOT = {
			check_variable = {
				which = centaur_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_centaur_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	#custom_trigger_tooltip = {
		#tooltip = have_unmatching_centaur_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_centaur_race_trigger = yes }
				NOT = { owner = { has_country_modifier = centaur_administration } }
				OR = {
					has_coexisting_centaur_pop_trigger = yes
					has_oppressed_centaur_pop_trigger = yes
					has_province_modifier = centaur_majority_primary
				}
			}
			AND = {
				owner = { high_tolerance_centaur_race_trigger = yes }
				owner = { has_country_modifier = centaur_administration }
				OR = {
					has_coexisting_centaur_pop_trigger = yes
					has_oppressed_centaur_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_centaur_race_trigger = yes }
				OR = {
					has_integrated_centaur_pop_trigger = yes
					has_oppressed_centaur_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_centaur_race_trigger = yes }
				OR = {
					has_integrated_centaur_pop_trigger = yes
					has_coexisting_centaur_pop_trigger = yes
				}
			}
		}
	#}
}
# For Ai Only
wants_to_increase_tolerance_centaur = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = centaur_race_tolerance
			which = centaur_race_tolerance_ai
		}
	}
}
wants_to_maintain_tolerance_centaur = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = centaur_race_tolerance_ai
		which = centaur_race_tolerance
	}
}
wants_to_decrease_tolerance_centaur = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = centaur_race_tolerance
		which = centaur_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = centaur_race_tolerance_ai
			which = centaur_race_tolerance
		}
	}
}

# HARIMARI -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_harimari_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_harimari_minority_tooltip
		OR = {
			has_province_modifier = harimari_minority_oppressed_small
			has_province_modifier = harimari_minority_coexisting_small
			has_province_modifier = harimari_minority_integrated_small
			has_province_modifier = harimari_minority_oppressed_large
			has_province_modifier = harimari_minority_coexisting_large
			has_province_modifier = harimari_minority_integrated_large
		}
	}
}
has_harimari_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_harimari_majority_tooltip
		OR = {
			has_province_modifier = harimari_majority_oppressed
			has_province_modifier = harimari_majority_coexisting
			has_province_modifier = harimari_majority_integrated
			has_province_modifier = harimari_majority_primary
		}
	}
}
has_small_harimari_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_harimari_minority_tooltip
		OR = {
			has_province_modifier = harimari_minority_oppressed_small
			has_province_modifier = harimari_minority_coexisting_small
			has_province_modifier = harimari_minority_integrated_small
		}
	}
}
has_large_harimari_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_harimari_minority_tooltip
		OR = {
			has_province_modifier = harimari_minority_oppressed_large
			has_province_modifier = harimari_minority_coexisting_large
			has_province_modifier = harimari_minority_integrated_large
		}
	}
}
has_oppressed_harimari_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_harimari_minority_tooltip
		OR = {
			has_province_modifier = harimari_minority_oppressed_small
			has_province_modifier = harimari_minority_oppressed_large
		}
	}
}
has_oppressed_harimari_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_harimari_pop_tooltip
		OR = {
			has_province_modifier = harimari_minority_oppressed_small
			has_province_modifier = harimari_minority_oppressed_large
			has_province_modifier = harimari_majority_oppressed
		}
	}
}
has_integrated_harimari_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_harimari_minority_tooltip
		OR = {
			has_province_modifier = harimari_minority_integrated_small
			has_province_modifier = harimari_minority_integrated_large
		}
	}
}
has_integrated_harimari_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_harimari_pop_tooltip
		OR = {
			has_province_modifier = harimari_minority_integrated_small
			has_province_modifier = harimari_minority_integrated_large
			has_province_modifier = harimari_majority_integrated
		}
	}
}
has_coexisting_harimari_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_harimari_minority_tooltip
		OR = {
			has_province_modifier = harimari_minority_coexisting_small
			has_province_modifier = harimari_minority_coexisting_large
		}
	}
}
has_coexisting_harimari_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_harimari_pop_tooltip
		OR = {
			has_province_modifier = harimari_minority_coexisting_small
			has_province_modifier = harimari_minority_coexisting_large
			has_province_modifier = harimari_majority_coexisting
			has_province_modifier = harimari_majority_primary
		}
	}
}
has_any_harimari_pop_trigger = {	#Any pop minority or majority
	OR = {
		has_province_modifier = harimari_minority_oppressed_small
		has_province_modifier = harimari_minority_oppressed_large
		has_province_modifier = harimari_majority_oppressed
		has_province_modifier = harimari_minority_coexisting_small
		has_province_modifier = harimari_minority_coexisting_large
		has_province_modifier = harimari_majority_coexisting
		has_province_modifier = harimari_minority_integrated_small
		has_province_modifier = harimari_minority_integrated_large
		has_province_modifier = harimari_majority_integrated
		has_province_modifier = harimari_majority_primary
	}
}
# Country level
max_tolerance_harimari_race_trigger = {	# Is harimari tolerance = 100
	check_variable = {
		which = harimari_race_tolerance
		which = 100
	}
}
high_tolerance_harimari_race_trigger = {	# Is harimari tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_harimari_people_tooltip
		OR = {
			check_variable = {
				which = harimari_race_tolerance
				value = 70
			}
			has_country_modifier = harimari_administration
		}
	}
}
medium_tolerance_harimari_race_trigger = {	# Is harimari tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_harimari_people_tooltip
		NOT = { has_country_modifier = harimari_administration }
		check_variable = {
			which = harimari_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = harimari_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_harimari_race_trigger = {	# Is harimari tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_harimari_people_tooltip
		NOT = { has_country_modifier = harimari_administration }
		NOT = {
			check_variable = {
				which = harimari_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_harimari_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	#custom_trigger_tooltip = {
		#tooltip = have_unmatching_harimari_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_harimari_race_trigger = yes }
				NOT = { owner = { has_country_modifier = harimari_administration } }
				OR = {
					has_coexisting_harimari_pop_trigger = yes
					has_oppressed_harimari_pop_trigger = yes
					has_province_modifier = harimari_majority_primary
				}
			}
			AND = {
				owner = { high_tolerance_harimari_race_trigger = yes }
				owner = { has_country_modifier = harimari_administration }
				OR = {
					has_coexisting_harimari_pop_trigger = yes
					has_oppressed_harimari_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_harimari_race_trigger = yes }
				OR = {
					has_integrated_harimari_pop_trigger = yes
					has_oppressed_harimari_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_harimari_race_trigger = yes }
				OR = {
					has_integrated_harimari_pop_trigger = yes
					has_coexisting_harimari_pop_trigger = yes
				}
			}
		}
	#}
}
# For Ai Only
wants_to_increase_tolerance_harimari = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = harimari_race_tolerance
			which = harimari_race_tolerance_ai
		}
	}
}
wants_to_maintain_tolerance_harimari = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = harimari_race_tolerance_ai
		which = harimari_race_tolerance
	}
}
wants_to_decrease_tolerance_harimari = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = harimari_race_tolerance
		which = harimari_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = harimari_race_tolerance_ai
			which = harimari_race_tolerance
		}
	}
}

# HOBGOBLIN -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Province
has_hobgoblin_minority_trigger = {	# Checks on Province Level whatever there is a Orcish minority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_hobgoblin_minority_tooltip
		OR = {
			has_province_modifier = hobgoblin_minority_oppressed_small
			has_province_modifier = hobgoblin_minority_coexisting_small
			has_province_modifier = hobgoblin_minority_integrated_small
			has_province_modifier = hobgoblin_minority_oppressed_large
			has_province_modifier = hobgoblin_minority_coexisting_large
			has_province_modifier = hobgoblin_minority_integrated_large
		}
	}
}
has_hobgoblin_majority_trigger = {	# Checks on Province Level whatever there is a Orcish majority (only in province scope)
	custom_trigger_tooltip = {
		tooltip = province_has_hobgoblin_majority_tooltip
		OR = {
			has_province_modifier = hobgoblin_majority_oppressed
			has_province_modifier = hobgoblin_majority_coexisting
			has_province_modifier = hobgoblin_majority_integrated
			has_province_modifier = hobgoblin_majority_primary
		}
	}
}
has_small_hobgoblin_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_small_hobgoblin_minority_tooltip
		OR = {
			has_province_modifier = hobgoblin_minority_oppressed_small
			has_province_modifier = hobgoblin_minority_coexisting_small
			has_province_modifier = hobgoblin_minority_integrated_small
		}
	}
}
has_large_hobgoblin_minority_trigger = {	# Only checks for small minorities
	custom_trigger_tooltip = {
		tooltip = province_has_a_large_hobgoblin_minority_tooltip
		OR = {
			has_province_modifier = hobgoblin_minority_oppressed_large
			has_province_modifier = hobgoblin_minority_coexisting_large
			has_province_modifier = hobgoblin_minority_integrated_large
		}
	}
}
has_oppressed_hobgoblin_minority_trigger = {	# Only checks for oppressed minorities
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_hobgoblin_minority_tooltip
		OR = {
			has_province_modifier = hobgoblin_minority_oppressed_small
			has_province_modifier = hobgoblin_minority_oppressed_large
		}
	}
}
has_oppressed_hobgoblin_pop_trigger = {	# Only checks for oppressed any
	custom_trigger_tooltip = {
		tooltip = province_has_oppressed_hobgoblin_pop_tooltip
		OR = {
			has_province_modifier = hobgoblin_minority_oppressed_small
			has_province_modifier = hobgoblin_minority_oppressed_large
			has_province_modifier = hobgoblin_majority_oppressed
		}
	}
}
has_integrated_hobgoblin_minority_trigger = {	# Only checks for integrated minorities
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_hobgoblin_minority_tooltip
		OR = {
			has_province_modifier = hobgoblin_minority_integrated_small
			has_province_modifier = hobgoblin_minority_integrated_large
		}
	}
}
has_integrated_hobgoblin_pop_trigger = {	# Only checks for integrated any
	custom_trigger_tooltip = {
		tooltip = province_has_integrated_hobgoblin_pop_tooltip
		OR = {
			has_province_modifier = hobgoblin_minority_integrated_small
			has_province_modifier = hobgoblin_minority_integrated_large
			has_province_modifier = hobgoblin_majority_integrated
			has_province_modifier = hobgoblin_majority_primary
		}
	}
}
has_coexisting_hobgoblin_minority_trigger = {	# Only checks for coexisting minorities
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_hobgoblin_minority_tooltip
		OR = {
			has_province_modifier = hobgoblin_minority_coexisting_small
			has_province_modifier = hobgoblin_minority_coexisting_large
		}
	}
}
has_coexisting_hobgoblin_pop_trigger = {	# Only checks for coexisting any
	custom_trigger_tooltip = {
		tooltip = province_has_coexisting_hobgoblin_pop_tooltip
		OR = {
			has_province_modifier = hobgoblin_minority_coexisting_small
			has_province_modifier = hobgoblin_minority_coexisting_large
			has_province_modifier = hobgoblin_majority_coexisting
		}
	}
}
has_any_hobgoblin_pop_trigger = {	#Any pop minority or majority
	OR = {
		has_province_modifier = hobgoblin_minority_oppressed_small
		has_province_modifier = hobgoblin_minority_oppressed_large
		has_province_modifier = hobgoblin_majority_oppressed
		has_province_modifier = hobgoblin_minority_coexisting_small
		has_province_modifier = hobgoblin_minority_coexisting_large
		has_province_modifier = hobgoblin_majority_coexisting
		has_province_modifier = hobgoblin_minority_integrated_small
		has_province_modifier = hobgoblin_minority_integrated_large
		has_province_modifier = hobgoblin_majority_integrated
		has_province_modifier = hobgoblin_majority_primary
	}
}
# Country level
max_tolerance_hobgoblin_race_trigger = {	# Is hobgoblin tolerance = 100
	check_variable = {
		which = hobgoblin_race_tolerance
		which = 100
	}
}
high_tolerance_hobgoblin_race_trigger = {	# Is hobgoblin tolerance high? (integrated)
	custom_trigger_tooltip = {
		tooltip = integrated_hobgoblin_people_tooltip
		OR = {
			check_variable = {
				which = hobgoblin_race_tolerance
				value = 70
			}
			has_country_modifier = hobgoblin_administration
		}
	}
}
medium_tolerance_hobgoblin_race_trigger = {	# Is hobgoblin tolerance normal? (coexisting)
	custom_trigger_tooltip = {
		tooltip = coexisting_hobgoblin_people_tooltip
		NOT = { has_country_modifier = hobgoblin_administration }
		check_variable = {
			which = hobgoblin_race_tolerance
			value = 31
		}
		NOT = {
			check_variable = {
				which = hobgoblin_race_tolerance
				value = 70
			}
		}
	}
}
low_tolerance_hobgoblin_race_trigger = {	# Is hobgoblin tolerance low? (oppressed)
	custom_trigger_tooltip = {
		tooltip = oppressed_hobgoblin_people_tooltip
		NOT = { has_country_modifier = hobgoblin_administration }
		NOT = {
			check_variable = {
				which = hobgoblin_race_tolerance
				value = 31
			}
		}
	}
}
has_unmatching_hobgoblin_tolerance_trigger = {	# Checks whatever the current modifier matches the current tolerance level
	#custom_trigger_tooltip = {
		#tooltip = have_unmatching_hobgoblin_tolerance_trigger
		OR = {
			AND = {
				owner = { high_tolerance_hobgoblin_race_trigger = yes }
				NOT = { owner = { has_country_modifier = hobgoblin_administration } }
				OR = {
					has_coexisting_hobgoblin_pop_trigger = yes
					has_oppressed_hobgoblin_pop_trigger = yes
					has_province_modifier = hobgoblin_majority_primary
				}
			}
			AND = {
				owner = { high_tolerance_hobgoblin_race_trigger = yes }
				owner = { has_country_modifier = hobgoblin_administration }
				OR = {
					has_coexisting_hobgoblin_pop_trigger = yes
					has_oppressed_hobgoblin_pop_trigger = yes
				}
			}
			AND = {
				owner = { medium_tolerance_hobgoblin_race_trigger = yes }
				OR = {
					has_integrated_hobgoblin_pop_trigger = yes
					has_oppressed_hobgoblin_pop_trigger = yes
				}
			}
			AND = {
				owner = { low_tolerance_hobgoblin_race_trigger = yes }
				OR = {
					has_integrated_hobgoblin_pop_trigger = yes
					has_coexisting_hobgoblin_pop_trigger = yes
				}
			}
		}
	#}
}
# For Ai Only
wants_to_increase_tolerance_hobgoblin = {	# True if the AI want higher tolerance than the current level
	NOT = {
		check_variable = {
			which = hobgoblin_race_tolerance
			which = hobgoblin_race_tolerance_ai
		}
	}
}
wants_to_maintain_tolerance_hobgoblin = {		# True if the AI have the desired tolerance level
	is_variable_equal = {
		which = hobgoblin_race_tolerance_ai
		which = hobgoblin_race_tolerance
	}
}
wants_to_decrease_tolerance_hobgoblin = {	# True if the AI want a lower tolerance than the current level
	check_variable = {
		which = hobgoblin_race_tolerance
		which = hobgoblin_race_tolerance_ai
	}
	NOT = {
		is_variable_equal = {
			which = hobgoblin_race_tolerance_ai
			which = hobgoblin_race_tolerance
		}
	}
}
has_racial_focus = {
	OR = {
		has_country_modifier = racial_focus_centaur
		has_country_modifier = racial_focus_dwarven
		has_country_modifier = racial_focus_elven
		has_country_modifier = racial_focus_gnollish
		has_country_modifier = racial_focus_gnomish
		has_country_modifier = racial_focus_goblin
		has_country_modifier = racial_focus_half_elven
		has_country_modifier = racial_focus_half_orcish
		has_country_modifier = racial_focus_halfling
		has_country_modifier = racial_focus_harimari
		has_country_modifier = racial_focus_harpy
		has_country_modifier = racial_focus_hobgoblin
		has_country_modifier = racial_focus_human
		has_country_modifier = racial_focus_kobold
		has_country_modifier = racial_focus_ogre
		has_country_modifier = racial_focus_orcish
		has_country_modifier = racial_focus_ruinborn
		has_country_modifier = racial_focus_troll
	}
}

is_race_in_any_caste = {
	[[harimari]
		OR = {
			has_country_flag = harimari_in_uppercastes
			has_country_flag = harimari_in_middlecastes
			has_country_flag = harimari_in_lowercastes
		}
	]
	[[human]
		OR = {
			has_country_flag = human_in_uppercastes
			has_country_flag = human_in_middlecastes
			has_country_flag = human_in_lowercastes
		}
	]
	[[centaur]
		always = no
	]
	[[dwarven]
		OR = {
			has_country_flag = dwarf_in_uppercastes
			has_country_flag = dwarf_in_middlecastes
			has_country_flag = dwarf_in_lowercastes
		}
	]
	[[elven]
		always = no
	]
	[[gnollish]
		always = no
	]
	[[gnomish]
		always = no
	]
	[[goblin]
		always = no
	]
	[[halfling]
		always = no
	]
	[[half_elven]
		always = no
	]
	[[half_orcish]
		always = no
	]
	[[harpy]
		always = no
	]
	[[hobgoblin]
		OR = {
			has_country_flag = hobgoblin_in_uppercastes
			has_country_flag = hobgoblin_in_middlecastes
			has_country_flag = hobgoblin_in_lowercastes
		}
	]
	[[kobold]
		always = no
	]
	[[ogre]
		always = no
	]
	[[orcish]
		always = no
	]
	[[ruinborn]
		always = no
	]
	[[troll]
		always = no
	]
}

can_purge_race = {
	NOT = {
		OR = {
			has_country_modifier = racial_pop_$RACE$_purge
			has_country_modifier = racial_pop_$RACE$_expulsion
		}
	}
	NOT = { has_country_modifier = $RACE$_administration }
	NOT = { has_country_modifier = $RACE$_military }
	NOT = { ruler_is_$RACE$ = yes }
	if = {
		limit = { ai = yes }
		OR = {
			any_owned_province = {
				has_$RACE$_minority_trigger = yes
			}
			any_owned_province = {
				has_$RACE$_majority_trigger = yes
			}
		}
	}
	NOT = { has_country_modifier = forced_to_end_$RACE$_purge }
	NOT = { has_government_attribute = disabled_purging }
	NOT = { has_government_attribute = disabled_purging_$RACE$ }
	if = {
		limit = { has_country_flag = has_caste_estates }
		NOT = {
			is_race_in_any_caste = {
				$RACE$ = yes
			}
		}
	}
	adm_power = 100
}

can_expel_race = {
	NOT = {
		OR = {
			has_country_modifier = racial_pop_$RACE$_purge
			has_country_modifier = racial_pop_$RACE$_expulsion
		}
	}
	NOT = { has_country_modifier = $RACE$_administration }
	NOT = { has_country_modifier = $RACE$_military }
	NOT = { ruler_is_$RACE$ = yes }
	if = {
		limit = { ai = yes }
		OR = {
			any_owned_province = {
				has_$RACE$_minority_trigger = yes
			}
			any_owned_province = {
				has_$RACE$_majority_trigger = yes
			}
		}
	}
	NOT = { has_country_modifier = forced_to_end_$RACE$_purge }
	NOT = { has_government_attribute = disabled_expelling }
	NOT = { has_government_attribute = disabled_expelling_$RACE$ }
	if = {
		limit = { has_country_flag = has_caste_estates }
		NOT = {
			is_race_in_any_caste = {
				$RACE$ = yes
			}
		}
	}
	adm_power = 50
}
